[{"content":"This article will cover all the steps and code needed to build a podcast player with React, TailwindCSS, and Apples' podcast API. It is a long one broken into five parts. I hope you are ready to dive in. Introduction React is a user interface framework developed by Facebook. It allows developers to build intuitive websites with rich user interactivity using HTML-like syntax. It also allows modularity, which means we can break code down into manageable modules that makes maintenance of your website easy.\nIn this tutorial, we are going to build a podcast application using React and Apple Podcast API. The application will allow users to browse through all the podcasts available on Apple. When users visit our deployed site, they can choose to listen to the top podcast of the day or use the search functionality that we will develop to search for any podcast of their choice available on Apple Podcast.\nI chose Apple API because it offers a free API with few limitations. While experimenting with the API, I didn\u0026rsquo;t hit the APIs rate limit despite some heavy reloading during the application development. I found that other podcast APIs required creating an account, and they had limited access to their free plans. Meanwhile, with Apple API you don\u0026rsquo;t need to log in or provide any details, the limits are generous and no token is required to send requests.\nWho this tutorial is for This tutorial is for intermediate developers, developers who have built a few apps with React and are looking for a comprehensive introduction to some advanced features like debounce, lazy loading, redux (state management), routing, and loading pages dynamically. Newbies can follow along but note that we glazed over details in some parts, including the CSS.\nWhat you will learn This tutorial we would teach you:\n API calls with axios Debounce React Hooks Responsive web design with Tailwind CSS Reusable React component Using \u0026lsquo;read more\u0026rsquo; button to hide/show text Using JavaScript Audio API to play sounds in the browser Apple API Infinite scroll, for lazy loading App layout with a fixed sidebar that does not change between renders, improving performance Postman - Calling Apple API from the browser downloads a file that is hard to analyse, but postman has a \u0026ldquo;JSON\u0026rdquo; feature Reverse Proxy to prevent CORS Error Optimization of the App React-Redux  ","permalink":"https://techwizerd.com/posts/how-to-build-a-podcast-player-with-react-js-tailwind-css-and-apple-podcast-api/","summary":"This article will cover all the steps and code needed to build a podcast player with React, TailwindCSS, and Apples' podcast API. It is a long one broken into five parts. I hope you are ready to dive in. Introduction React is a user interface framework developed by Facebook. It allows developers to build intuitive websites with rich user interactivity using HTML-like syntax. It also allows modularity, which means we can break code down into manageable modules that makes maintenance of your website easy.","title":"How to Build a Podcast Player With React Js, Tailwind Css and Apple Podcast API"},{"content":"Introduction This tutorial will walk you through updating your page DOM after an API call, using react hooks.\nIn our example, we would be adding to a list of posts. After a new item is added to the list, we want to trigger react hooks to re-run our fetch API to update the list the user can see. The default behaviour of react useEffect() can lead to an infinite loop, although it is a working solution. But it is not a desirable one.\nRequirements This tutorial requires a basic understanding of the following concepts\n React React Hooks (useEffect(), useState()) Axios API module (fetching and posting data) create-react-app  Let\u0026rsquo;s get started const Posts = () =\u0026gt; { const [posts, setPosts] = useState([]) const baseUrl = 'https://jsonplaceholder.typicode.com/posts/' const getPosts = async () =\u0026gt; { try { const userPosts = await axios.get(baseUrl) setPosts(userPosts.data) } catch (error) { console.error(error.message) } } useEffect(() =\u0026gt; { getPosts() }, []) /* Hook to add post name through API */ const [newPost, setNewPost] = useState({ postName: '' }) const handleChange = (event) =\u0026gt; { setNewPost({ ...newPost, [event.target.name]: event.target.value }) } const handleSubmit = (e) =\u0026gt; { e.preventDefault() const url = baseUrl + 'add/' axios.post(url, { name: newPost.postName, user: 1 }) .then(response =\u0026gt; { console.log(response.data) }) .catch(error =\u0026gt; { console.log(error.response.data) }) e.target.reset() } return ( \u0026lt;div\u0026gt; \u0026lt;form onSubmit={handleSubmit}\u0026gt; \u0026lt;input name=\u0026quot;postName\u0026quot; onChange={handleChange} required /\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Add Post Name\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; {posts.map(post=\u0026gt;( \u0026lt;li key={post.id}\u0026gt;{post.title}\u0026lt;/li\u0026gt; ))} \u0026lt;/div\u0026gt; ) } In the code above, we created a functional component called Posts that fetches and displays data from an API using axios. This component also has a form to add a new post name.\n The problem with this code is that when a new post name is added by axios.post to the database, the user cannot see it immediately. Unless they refresh the page.\n By adding the dependency posts to useEffect(). When a new post name is added, the list will automatically update for the user to see the new post name.\nuseEffect(() =\u0026gt; { getPosts() }, [posts]) The problem with this solution is that if we include a simple console.log('I was hit') in the getPost() method, we will see that the useEffect() runs continuously.\nAdding posts as a dependency leads to an infinite loop, because of the way object reference works in JavaScript. See react useeffect infinite loop.\nThe Solution The ideal solution is to use a dependency that is more predictable, like a simple count. This will be updated only after a successful axios POST request. That is we have successfully added a new post name.\nLet us update our code.\nconst [postLength, setPostLength] = useState(0) #\u0026lt;----new useEffect(() =\u0026gt; { getPosts() }, [postLength]) #\u0026lt;----new And add setCartLength(cartLength + 1) to the successful callback of our API call.\nconst handleSubmit = (e) =\u0026gt; { e.preventDefault() const url = baseUrl + 'add/' axios.post(url, { name: newPost.postName, user: 1 }) .then(response =\u0026gt; { console.log(response.data) setCartLength(cartLength + 1) #\u0026lt;----new }) .catch(error =\u0026gt; { console.log(error.response.data) }) e.target.reset() } What we have done here, is to add a new state called postLength.\nNow the useEffect() will be listening for changes in postLength. And its value changes, only then will getPosts be called again.\nThe API GET request for all posts will only be called again when a new post is added. We ensured that by adding the setCartLength(cartLength + 1) to the successful callback of our API POST request.\nWith this solution, we can update our list after every addition to the list. While avoiding the infinite loop of react useEffect() when using dependencies.\nThis solution can also be extended to other operations like editing or deleting any item in the list. All you have to do is change the state of your dependency after a successful API call.\n","permalink":"https://techwizerd.com/posts/how-to-use-react-use-effect-to-post-data-and-refresh-without-infinite-callback/","summary":"Introduction This tutorial will walk you through updating your page DOM after an API call, using react hooks.\nIn our example, we would be adding to a list of posts. After a new item is added to the list, we want to trigger react hooks to re-run our fetch API to update the list the user can see. The default behaviour of react useEffect() can lead to an infinite loop, although it is a working solution.","title":"How to use React useEffect to post data and refresh without infinite callback"},{"content":"Hugo blog is becoming one of the most popular static site generators.\nThe first time I used it, it blew me away by how easy it was to set up a blog on my local machine. It is also very easy to publish your hugo site to Github Pages for free.\nIn this tutorial, I am going to show you how to set up your Hugo blog on Github Pages. We would be using this theme. You do not need to pay for hosting or provide your credit card details.\nStep 1: Installing Hugo on your windows machine. You can get Hugo by using Chocolatey. Chocolatey is a windows package manager.\nAfter installing Chocolatey. Visit Hugo website, for instructions on how to install Hugo.\nYou can also install it directly from Github. If you do not want to install Chocolatey.\nStep 2: Creating a new project After installing Hugo, type hugo in your cmd to ensure that it is working.\nhugo If it was successfully installed, we can go ahead and start a new site in a directory of your choice.\nhugo new site test.com -f yml This code creates a new site called test and forces it to use yml format for its' config file, which is more readable than toml files. It also creates a folder called test that will house all our Hugo resources.\nYou should see a message like so:\nCongratulations! Your new Hugo site is created in C:\\computer\\Hugo\\test.com Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026quot;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026quot; command. 2. Perhaps you want to add some content. You can add single files with \u0026quot;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026quot;. 3. Start the built-in live server via \u0026quot;hugo server\u0026quot;. Visit https://gohugo.io/ for quickstart guide and full documentation. Step 3: Add a Hugo theme As discussed earlier, Hugo has a lot of themes that makes development easy. We would use the PaperMod theme.\nRun the following code one after the other in your command prompt.\ncd test.com git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 This code changes the directory to the test.com. It initializes git in the current folder. And finally pulls the PaperMod theme from Github into the themes/PaperMod folder.\nYour directory should now look like this.\nNext, visit the PaperMod installation page and copy the content of the sample config.yml. Overwrite the original content of the config.yml file, in the root of our test.com folder.\nThen run this in your command prompt.\nhugo server This will start the Hugo server. Visit the localhost URL where Hugo says the site is running. And you should see this.\nThis is the default home page of the PaperMod theme.\nStep 4: Add pages To add pages.\nRun the command:\nhugo new posts/html.md This creates a new folder called posts and a new markdown file called html.md.\nThe file should have a title, date and draft status.\nChange the draft status to false or delete that line.\nCopy the text below into the html.md file for test purposes.\n  Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.\n  Run in the command prompt\nhugo server -D The -D flag, tells the server to also show drafts, because our html post has draft set to true. You can set draft to false, or remove that line entirely. Then you do not need the -D flag anymore.\n Note that drafts will not be added to the site when we build it later.\n You should see that our first post.\nAt this point we are ready to move our blog to Github Pages.\nStep 5: Set up repository Firstly, in the config.yml file, add this line publishDir: \u0026quot;docs\u0026quot; after theme: PaperMod. This tells Hugo to publish our site into the directory called docs, when we build.\nThen run:\nhugo -t PaperMod The PaperMod is the name of our theme, if you are using another theme. You would type the name of your theme in its' place.\nThis code builds our site into the docs folder.\nVisit your github profile and create a new repository called test.com.\nFrom our test.com directory on our local machine. Run the following code:\ngit remote add origin \u0026lt;repository URL\u0026gt; git add . git commit -m \u0026quot;Initial Commit\u0026quot; git push origin master This code adds a remote url to our repository, adds and commits our work. Then finally pushes it to our remote repository.\nStep 6: Github Pages From the new repository, click on settings then scroll down to the Github Pages section.\nFor source, select branch as master and change /(root) to docs, then save.\nAfter saving, scroll down back to the Github Ppages section, then copy the new URL that Github has provided. That is where our website is located.\nWe would copy this URL into our config.yml file.\nIn the config.yml file replace the value for baseURL with the github page link we just copied.\nThen run the following code:\ngit add . git commit -m \u0026quot;Updated baseURL\u0026quot; git push origin master This updates the remote repository with our latest changes.\nAt this stage, when you visit the Github Pages URL, you should see the site we just built.\nThat is how we connect Hugo to Github Pages.\nThe benefit is that you can write your posts locally in markdown, and once you push to the remote repository, you website will be updated automatically.\nIf you would like to host your website on your own domain. This link provides instructions on how to achieve that with namecheap web host.\n","permalink":"https://techwizerd.com/posts/how-to-create-hugo-blog-on-github-pages-using-windows/","summary":"Hugo blog is becoming one of the most popular static site generators.\nThe first time I used it, it blew me away by how easy it was to set up a blog on my local machine. It is also very easy to publish your hugo site to Github Pages for free.\nIn this tutorial, I am going to show you how to set up your Hugo blog on Github Pages. We would be using this theme.","title":"How to create Hugo blog on Github Pages Using Windows"}]