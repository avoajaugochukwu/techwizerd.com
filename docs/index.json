[{"content":"This article will cover all the steps and code needed to build a podcast player with React, TailwindCSS, and Apples' podcast API. It is a long one broken into five parts. I hope you are ready to dive in. Live code demo on Code Sand Box\nIntroduction React is a user interface framework developed by Facebook. It allows developers to build intuitive websites with rich user interactivity using HTML-like syntax. It also allows modularity, which means you can break code down into manageable modules that makes maintenance of your website or application easy to maintain.\nIn this tutorial, you are going to build a podcast application using React and Apple Podcast API. The application will allow users to browse through all the podcasts available on Apple. When users visit our deployed site, they can choose to listen to the top podcast of the day or use the search functionality that you will develop to search for any podcast of their choice available on Apple Podcast.\nI chose Apple API because it offers a free API with few limitations. While experimenting with the API, I didn\u0026rsquo;t hit the APIs rate limit despite some heavy reloading during the application development. I found that other podcast APIs required creating an account, and they had limited access to their free plans. Meanwhile, with Apple API, you don\u0026rsquo;t need to log in or provide any details, the limits are generous, and no token is required to send requests.\nOther parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\nWho this tutorial is for This tutorial is for intermediate developers, developers who have built a few apps with React and are looking for a comprehensive introduction to some advanced features like debounce, lazy loading, redux (state management), routing, and loading pages dynamically. Newbies can follow along but note that we glazed over details in some parts, including the CSS.\nWhat you will learn In this tutorial you will learn:\n API calls with Axios Debounce React Hooks Responsive web design with Tailwind CSS Reusable React component Using the \u0026lsquo;read more\u0026rsquo; button to hide/show text Using JavaScript Audio API to play sounds in the browser Apple API Infinite scroll, for lazy loading App layout with a fixed sidebar that does not change between renders, improving performance Postman - Calling Apple API from the browser downloads a file that is hard to analyze, but postman has a \u0026ldquo;JSON\u0026rdquo; feature Reverse Proxy to prevent CORS Error React-Redux  Tools you will need  A computer with Node installed. You can download Nodejs from nodejs.org. I will advise you to download version 14+. NPM, a package manager that helps you pull in the various modules needed for our application. A modern code editor. I will recommend visual studio code. It comes with an assortment of extensions to improve the workflow of developers. Heroku account and Heroku CLI. Heroku will host a reverse proxy to prevent CORS issues when you deploy the final application. Create a Heroku account if you don\u0026rsquo;t have one. Then install Heroku CLI, you can install it with NPM, but note that it wouldn\u0026rsquo;t auto-update. Other methods are available. How to install and run the reverse proxy will be discussed later in this tutorial. If you skip this section, you might run into CORS issues. (Optional) Postman, for exploring API queries and viewing the results in your desired format like JSON.  Our approach I will start by creating the structure for the significant parts of the project. It will help you focus on functionality down the line. After setting up the project files and folders, I will create the skeleton of the application. Then move on to building the functionalities.\nWhen making changes to files, I will provide the entire code, so you donâ€™t have to worry about the changes and focus on the tutorial.\nI will also create checkpoints after each part, including GitHub code and live code through Codesanbox (where applicable) so that you have something to compare your code.\nSetting up the React project and files To start the application, open your command-line tool of choice and run:\nnpx create-react-app podcast-player cd podcast-player yarn start The first command takes some time to complete because it downloads files and folders for the project.\nThese commands create the projects' files and folders, change the directory to the just created folder, and then start the application because of the yarn start.\nAt this point, you should see the famous default React app page in the browser at http//:localhost:3000.\nIf you want more details on creating a React app, please look at create-react-app website.\nBuilding the application layout TailwindCSS setup In this tutorial, I donâ€™t want to take your time to talk about installing Tailwind. And because of the extra work you have to do during deployment. Instead, I will provide all the styles needed for this application in a CSS stylesheet. Note that tailwind generated them. Tailwind employs a tree shaking technique that only adds the CSS classes used in the application when you build the application with yarn build. yarn build runs when you deploy your application to any popular platforms that host React like Heroku, Vercel, or Netlify.\n ðŸ”— If you want to install Tailwind for this tutorial, you can find the guide here. However, it is unnecessary for this application.\n  ðŸ”— This is the link to all the CSS files you need for this project. Click on \u0026lsquo;raw\u0026rsquo; and copy the CSS and overwrite the content of the App.css file in the root folder of the application.\n  ðŸ”— You can also get the CSS from the GitHub repo of the first checkpoint. Then copy the entire code into the App.css file in the root folder of the application.\n Setup pages or screens React router will handle navigation. React router is a module for React that allows you to navigate our application by mapping URLs to components. It can also take dynamic URLs, as you would see later.\nThis is the layout of the application: The application will be designed so that the sidebar and the footer will not re-render when the page changes. That means, unlike other apps that apply the React router at the device screen level. Instead, this application will use it inside a div or container in the app. In this case, the div that represents â€˜Multiple Screensâ€™ in the image above. The same will apply to the â€˜SideBarâ€™.\nNow run:\nyarn add react-router-dom This installs react-router-dom which is used for navigation.\nTaking care of images ones and for all ðŸ˜†\n ðŸ”— Download the images used in this project from Dropbox here. Then, click on the download button on the top right to download the images as a zip file and extract it.\n  ðŸ”— View the first checkpoint here. So that you can copy it into your project.\n Create an img folder inside the src folder of the project.\nCopy all the images from the image folder you downloaded and paste them into your newly created img folder.\nThis will ensure that when you flesh out the application, you won\u0026rsquo;t have image related errors.\nSuppose you want to change the favicon (the small image by the left of each website name on your browser\u0026rsquo;s address bar) of your site like mine. Replace the favicon.ico file in the public folder with an .ico file of your choice. Mine will be available in the public folder of the final version of the project.\nCreating the skeleton of the application layout Create a screens folder within src folder.\nAdd 4 new files namely:\n GenreListScreen.jsx HomeScreen.jsx PodcastDetailsScreen.jsx SearchScreen.jsx  Copy the code below the GenreListScreen.jsx\nimport React from \u0026#39;react\u0026#39; const GenreListScreen = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h1 className=\u0026#34;text-white\u0026#34;\u0026gt;GenreListScreen\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ) } export default GenreListScreen The code above creates a functional component and adds a simple white text inside it. So that when the routes are configured, you can verify that navigation to the different screens works. Then the export statement makes the component available to be imported in any file that needs it.\nThen repeat the same for the other 3 screen files.\nCopy the code below into the HomeScreen.jsx\nimport React from \u0026#39;react\u0026#39; const HomeScreen = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h1 className=\u0026#34;text-white\u0026#34;\u0026gt;HomeScreen\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ) } export default HomeScreen Copy the code below into the PodcastDetailsScreen.jsx\nimport React from \u0026#39;react\u0026#39; const PodcastDetailsScreen = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h1 className=\u0026#34;text-white\u0026#34;\u0026gt;PodcastDetailsScreen\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ) } export default PodcastDetailsScreen Copy the code below into the SearchScreen.jsx\nimport React from \u0026#39;react\u0026#39; const SearchScreen = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h1 className=\u0026#34;text-white\u0026#34;\u0026gt;SearchScreen\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ) } export default SearchScreen Create a components folder.\nAdd 2 new files namely:\n MobileHeader.jsx FooterPlayer.jsx  The MobileHeader will only display on small devices. On small devices, the SideBar disappears. So the application will have a top menu instead of a sidebar on mobile devices.\nThe FooterPlayer is used to show the podcast that is playing. It is static on the page to change pages without losing the ability to pause the currently playing podcast.\n// This component will only show on mobile sized viewports import React from \u0026#39;react\u0026#39; import { Link, NavLink } from \u0026#39;react-router-dom\u0026#39; import logo from \u0026#39;../img/logo.svg\u0026#39; import home_logo from \u0026#39;../img/home_icon.svg\u0026#39; import search_icon from \u0026#39;../img/search_icon_white.svg\u0026#39; const MobileHeader = () =\u0026gt; { return ( \u0026lt;div className=\u0026#34;block md:hidden w-full text-white bg-gray-900\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex flex-row \u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex flex-row py-4\u0026#34;\u0026gt; \u0026lt;img src={logo} alt=\u0026#39;logo\u0026#39; /\u0026gt; \u0026lt;Link className=\u0026#34;text-2xl text-white lg:text-3xl hover:text-gray-100\u0026#34; to=\u0026#34;/\u0026#34;\u0026gt; pplayer \u0026lt;/Link\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;text-left pt-3\u0026#34;\u0026gt; \u0026lt;NavLink className=\u0026#34;flex mx-2 my-1 rounded p-2 px-4 hover:bg-gray-800\u0026#34; activeClassName=\u0026#34;bg-gray-800\u0026#34; exact to=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;img src={home_logo} alt=\u0026#39;home_icon\u0026#39; /\u0026gt; \u0026lt;span className=\u0026#34;ml-4\u0026#34;\u0026gt;Home\u0026lt;/span\u0026gt; \u0026lt;/NavLink\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;text-left pt-3\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;NavLink className=\u0026#34;flex mx-2 my-1 rounded p-2 px-4 hover:bg-gray-800\u0026#34; activeClassName=\u0026#34;bg-gray-800\u0026#34; exact to=\u0026#34;/search\u0026#34;\u0026gt; \u0026lt;img src={search_icon} alt=\u0026#39;search_icon\u0026#39; /\u0026gt; \u0026lt;span className=\u0026#34;ml-4\u0026#34;\u0026gt;Search\u0026lt;/span\u0026gt; \u0026lt;/NavLink\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;mt-3 flex flex-col\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;//add link to your github repo\u0026#34; className=\u0026#34;mx-2 text-sm text-gray-600 hover:text-gray-500\u0026#34; aria-label=\u0026#34;GitHub\u0026#34;\u0026gt; Github \u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;//add link to your twitter\u0026#34; className=\u0026#34;mx-2 text-sm text-gray-600 hover:text-gray-500\u0026#34; aria-label=\u0026#34;Twitter\u0026#34;\u0026gt; Twitter \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } export default MobileHeader Don\u0026rsquo;t be intimidated by the code above. TailwindCSS demands plenty of CSS classes.\nLink and NavLink are imported, and Link is react-routers version of your anchor tag in HTML. While NavLink is similar to Link but in addition, it supports an activeClassName attribute that specifies the style of the link when it is active. Then the imported images are placed side-by-side with the navigation links. And an image of the site logo for the homepage link. Remember this is the MobileHeader that is only visible on small-width devices.\nThe other links with anchor tags are external links for you to link your GitHub and Twitter.\nCopy the code below into the FooterPlayer.jsx file.\nimport React from \u0026#39;react\u0026#39; const FooterPlayer = () =\u0026gt; { return ( \u0026lt;div className=\u0026#34;fixed left-0 bottom-0 min-w-full z-10\u0026#34; style={{ backgroundColor: \u0026#34;#1a1a1a\u0026#34; }}\u0026gt; \u0026lt;div className=\u0026#34;relative h-full w-full flex\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-white\u0026#34;\u0026gt;FooterPlayer\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } export default FooterPlayer This code defines a component that is fixed to the bottom of the page and not much for now.\nNext, create a containers folder.\nAdd the new files namlely:\n MainSection.jsx SideBar.jsx  The MainSection file will house all the screens and swap them accordingly when you interact with the application.\nCopy the code below into the MainSection.jsx file\nimport React from \u0026#39;react\u0026#39; import { Switch, Route } from \u0026#39;react-router-dom\u0026#39; import HomeScreen from \u0026#39;../screens/HomeScreen\u0026#39; import SearchScreen from \u0026#39;../screens/SearchScreen\u0026#39; import PodcastDetailsScreen from \u0026#39;../screens/PodcastDetailsScreen\u0026#39; import GenreListScreen from \u0026#39;../screens/GenreListScreen\u0026#39; const MainSection = () =\u0026gt; { return ( \u0026lt;\u0026gt; \u0026lt;main className=\u0026#34; player-section pl-0 md:pl-60 min-h-screen min-w-full\u0026#34;\u0026gt; \u0026lt;Switch\u0026gt; \u0026lt;Route exact path=\u0026#34;/\u0026#34; component={HomeScreen}\u0026gt;\u0026lt;/Route\u0026gt; \u0026lt;Route exact path=\u0026#34;/Search\u0026#34; component={SearchScreen}\u0026gt;\u0026lt;/Route\u0026gt; \u0026lt;Route exact path=\u0026#34;/podcast/:collectionId\u0026#34; render={(props) =\u0026gt; (\u0026lt;PodcastDetailsScreen {...props} /\u0026gt;)} /\u0026gt; \u0026lt;Route exact path=\u0026#34;/genre/:genreId\u0026#34; component={GenreListScreen}\u0026gt;\u0026lt;/Route\u0026gt; \u0026lt;/Switch\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/\u0026gt; ) } export default MainSection The code above imports some modules from the react-router-dom and also all the screen components. Then all the routes are defined within the Switch. As the name implies, the switch swaps the screens according to the URL the user visits.\nexact is used on all routes to remove ambiguity. The routes for HomeScreen and Search are static. While the routes for PodcastDetailsScreen and GenreListScreen are dynamic because they have to display the podcasts or genres that the user clicks on. The parts with the colon :collectionId and :genreId will be replaced by ids in the actual URL. And those ids can be passed to the PodcastDetailsScreen and GenreListScreen respectively as parameters or props that will query the API for the specific podcast or genre.\nThe collectionId is an alias for the podcast id in Apple Podcast API.\nThe weird-looking render={(props) =\u0026gt; (\u0026lt;PodcastDetailsScreen {...props} /\u0026gt;)} is used to pass down functions that will be created in another part of this tutorial. This Route will be updated later. One of Reacts' superpowers is passing data and functions seamlessly between parents and children components and vice versa.\nBringing it all together with the App.js file Overwrite the App.jsx file with the code below:\nimport React from \u0026#39;react\u0026#39; import { BrowserRouter } from \u0026#39;react-router-dom\u0026#39; import MainSection from \u0026#39;./containers/MainSection\u0026#39; import SideBar from \u0026#39;./containers/SideBar\u0026#39; import MobileHeader from \u0026#39;./components/MobileHeader\u0026#39; import FooterPlayer from \u0026#39;./components/FooterPlayer\u0026#39; function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;BrowserRouter\u0026gt; \u0026lt;div\u0026gt; \u0026lt;MobileHeader /\u0026gt; \u0026lt;div className=\u0026#34;flex relative\u0026#34;\u0026gt; \u0026lt;SideBar /\u0026gt; \u0026lt;MainSection /\u0026gt; \u0026lt;FooterPlayer /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/BrowserRouter\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; As its name implies, this file represents the entire application. Remember, all the screens were imported into the MainSection.jsx file because they will be Switched inside the MainSection component, while the SideBar and FooterPlayer will remain static on the screen between renders. This is not common practice for most applications, but I chose this style because it is fun, and besides, the SideBar contents don\u0026rsquo;t change.\nAll routers must be wrapped in the BrowserRouter which has been done here. A typical react-router code looks like this:\n// Do not copy this, it is an illustration \u0026lt;BrowserRouter\u0026gt; \u0026lt;Switch\u0026gt; \u0026lt;Route ... /\u0026gt; \u0026lt;Route ... /\u0026gt; \u0026lt;Route ... /\u0026gt; \u0026lt;/Switch\u0026gt; \u0026lt;/BrowserRouter\u0026gt; But putting the Switch in a separate file is cleaner.\n Run yarn start in the command line. To see the skeletal representation of the application.\n ðŸ’¡ Checkpoint 1  ðŸ”— If you encounter any errors, you can find the source code for this first part on GitHub. You can crosscheck with your work to find where you missed something.\n  See a live version of the application so far. Click on \u0026lsquo;Open Sandbox\u0026rsquo; to see the full code. Because the SideBar is not showing in the version below. Because the \u0026lt;iframe\u0026gt; is not wide enough to simulate a wider width screen.\n  function resizeIframe(obj) { obj.style.height = 1.05 * obj.contentWindow.document.body.scrollHeight + 'px'; }   Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\n","permalink":"https://techwizerd.com/posts/how-to-build-a-podcast-player-with-react-js-tailwind-css-and-apple-podcast-api/","summary":"This article will cover all the steps and code needed to build a podcast player with React, TailwindCSS, and Apples' podcast API. It is a long one broken into five parts. I hope you are ready to dive in. Live code demo on Code Sand Box\nIntroduction React is a user interface framework developed by Facebook. It allows developers to build intuitive websites with rich user interactivity using HTML-like syntax. It also allows modularity, which means you can break code down into manageable modules that makes maintenance of your website or application easy to maintain.","title":"How to Build a Podcast Player With React Js, Tailwind Css and Apple Podcast API"},{"content":"Add footer player and build the search functionality Add footer player The footer player will allow us to navigate through the application and keep the ability to pause or play any episode. When the application is first loaded, it will be hidden. And only appear when the user clicks play on any episode.\nOther parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\nOverwrite the code in the FooterPlayer.jsx file in the component folder we created earlier.\nimport React from \u0026#39;react\u0026#39; import { useSelector } from \u0026#39;react-redux\u0026#39; import EpisodeDescription from \u0026#39;./EpisodeDescription\u0026#39; import play_button from \u0026#39;../img/play_button.svg\u0026#39; import pause_button from \u0026#39;../img/pause_button.svg\u0026#39; const FooterPlayer = ({ handlePause, handlePlay }) =\u0026gt; { const currentTrack = useSelector((state) =\u0026gt; state.currentTrack) const { isPlaying, episode: { episodeUrl } } = currentTrack const { episode } = currentTrack return ( \u0026lt;\u0026gt; { episodeUrl \u0026amp;\u0026amp; \u0026lt;\u0026gt; \u0026lt;div className=\u0026#34;fixed left-0 bottom-0 min-w-full z-10\u0026#34; style={{ backgroundColor: \u0026#34;#1a1a1a\u0026#34; }}\u0026gt; \u0026lt;div className=\u0026#34;relative h-full w-full flex\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;sm:w-1/3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div key={episode.trackId} className=\u0026#34;flex flex-row md:p-4 p-1 \u0026#34;\u0026gt; \u0026lt;img className=\u0026#34; rounded\u0026#34; alt=\u0026#34;User avatar\u0026#34; src={episode.artworkUrl60} /\u0026gt; {/* */} { isPlaying === true \u0026amp;\u0026amp; episodeUrl === episode.episodeUrl ? \u0026lt;img src={pause_button} alt=\u0026#34;button\u0026#34; onClick={handlePause} id={episode.trackId} className=\u0026#34;align-middle md:pl-3 pl-2\u0026#34; /\u0026gt; : \u0026lt;img src={play_button} alt=\u0026#34;button\u0026#34; onClick={(e) =\u0026gt; handlePlay(episode)(e)} id={episode.trackId} className=\u0026#34;align-middle md:pl-3 pl-2\u0026#34; /\u0026gt; } {/* */} \u0026lt;div className=\u0026#34;text-gray-100 p-2 px-4 text-left\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;\u0026#34;\u0026gt;{episode.trackName}\u0026lt;/p\u0026gt; \u0026lt;EpisodeDescription description={episode.shortDescription} characterCount={100} readMore={false} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; } \u0026lt;/\u0026gt; ) } export default FooterPlayer This code obtains the episodeUrl from the redux store, remember it was set to undefined when the store was initialized. That means the code here will only appear when episodeUrl is has a value other than ```undefined``. And this happens once the user plays any episode. And it never disappears again after that, even when the episode is paused.\nWe have talked about the all the other functionality here in other parts of the tutorial.\nBuild the search functionality The search page has a rather complex view flow.\nFirst, when the user lands on the search page, they are shown genres of podcasts with the search button at the top. If the users find the genres they like on the home of the search page., they can click on it to see the top 100 podcasts in that genre. But if they do not find the podcast they like. They can click on the search input to type in their search term. When they start typing, a skeleton page is displayed to serve as a placeholder before the search results are returned. I will provide more explanation as I work through the search functionality.\nTo build the functionality, you have to do the following:\n Create TopPodcastBox.jsx component Create SearchTopGenres.jsx component Update GenreListScreen.jsx component Create SearchResultContainer.jsx component Create SearchResultSkeleton.jsx component Create SearchResults.jsx component Install use-debounce Update earchScreen.jsx component  First, create two folders inside the containers folder called SearchResult and SearchTopGenres. These folders will house new components.\nCreate TopPodcastBox.jsx component This component is a child component that will receive a genreId, query the Apple API for the top 4 podcasts in that genre, and displays only the images of those 4 podcasts. Users can also click on the entire box and be taken to the GenreListScreen component if they want a bigger list of that genre.\nCreate a file called TopPodcastBox.jsx inside â€œSearchTopGenres`` folder.\nCopy the code below into TopPodcastBox.js\nimport React, { useEffect, useState } from \u0026#39;react\u0026#39; import { useHistory } from \u0026#39;react-router-dom\u0026#39; import axios from \u0026#39;axios\u0026#39; import { BASE_URL } from \u0026#39;../../utils/consts\u0026#39; const TopPodcastBox = (props) =\u0026gt; { const history = useHistory() const { genreId, genre } = props const [podcasts, setPodcasts] = useState({}) useEffect(() =\u0026gt; { const fetchAPI = async () =\u0026gt; { getPodcasts(genreId) .then(data =\u0026gt; { setPodcasts(data) }) .catch(err =\u0026gt; console.log(err)) }; fetchAPI(); }, [genreId]); const { results } = podcasts const handleClick = (genreId) =\u0026gt; { history.push(`/genre/${genreId}`) } return ( \u0026lt;\u0026gt; { results \u0026amp;\u0026amp; \u0026lt;\u0026gt; \u0026lt;div className=\u0026#34;xl:w-1/4 md:w-1/2\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;m-4 cursor-pointer\u0026#34; onClick={() =\u0026gt; handleClick(genreId)}\u0026gt; \u0026lt;div className=\u0026#34;bg-gray-900 hover:bg-gray-800 pl-1 pt-2 pr-1 rounded-lg\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex flex-wrap\u0026#34;\u0026gt; {results.map(podcast =\u0026gt; ( \u0026lt;div className=\u0026#34;w-1/2\u0026#34; key={podcast.collectionId} \u0026gt; \u0026lt;img src={podcast.artworkUrl600} alt=\u0026#34;pod_art\u0026#34; className=\u0026#34;w-full\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;h3 className=\u0026#34;text-gray-300 font-bold py-2\u0026#34;\u0026gt; { genre ? genre : results[0].genres[0] //get the genre of the first item in result  } \u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; } \u0026lt;/\u0026gt; ) } export default TopPodcastBox const getPodcasts = async (genreId = 1533) =\u0026gt; { const response = await axios.get(`${BASE_URL}search?term=podcast\u0026amp;genreId=${genreId}\u0026amp;limit=4`) return response.data } Create SearchTopGenres.jsx component This file will be used to call the TopPodcastBox component in 10 places with different genreId, so that it can display the box of 4 podcast per genre.\nCreate a file called SearchTopGenres.jsx inside â€œSearchTopGenres`` folder.\nCopy the code below into SearchTopGenres.js\nimport React from \u0026#39;react\u0026#39; import TopPodcastBox from \u0026#39;./TopPodcastBox\u0026#39; const SearchTopGenres = () =\u0026gt; { return ( \u0026lt;section className=\u0026#34;text-gray-600 body-font\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-2xl py-2 sm:pt-10 font-bold px-5\u0026#34;\u0026gt; Top genres \u0026lt;/h1\u0026gt; \u0026lt;div className=\u0026#34;container px-5 py-5 mx-auto\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex flex-wrap -m-4\u0026#34;\u0026gt; \u0026lt;TopPodcastBox genreId=\u0026#34;1402\u0026#34; /\u0026gt; {/* Design */} \u0026lt;TopPodcastBox genreId=\u0026#34;1488\u0026#34; genre=\u0026#34;Crime\u0026#34; /\u0026gt; {/* Crime */} \u0026lt;TopPodcastBox genreId=\u0026#34;1303\u0026#34; /\u0026gt; {/* Comedy */} \u0026lt;TopPodcastBox genreId=\u0026#34;1321\u0026#34; /\u0026gt; {/* Business */} \u0026lt;TopPodcastBox genreId=\u0026#34;1314\u0026#34; /\u0026gt; {/* Religion */} \u0026lt;TopPodcastBox genreId=\u0026#34;1304\u0026#34; /\u0026gt; {/* Self-Improvement */} \u0026lt;TopPodcastBox genreId=\u0026#34;1527\u0026#34; /\u0026gt; {/* Politics */} \u0026lt;TopPodcastBox genreId=\u0026#34;1324\u0026#34; genre=\u0026#34;Society \u0026amp; Culture\u0026#34; /\u0026gt; {/* Society */} \u0026lt;TopPodcastBox genreId=\u0026#34;1533\u0026#34; genre=\u0026#34;Science\u0026#34; /\u0026gt; {/* Science */} \u0026lt;TopPodcastBox genreId=\u0026#34;1487\u0026#34; /\u0026gt; {/* History */} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; ) } export default SearchTopGenres Update GenreListScreen.jsx component Update the GenreListScreen.jsx file in the screens folder inside src older.\nOverwrite the code in GenreListScreen.jsxwith the code below:\nimport React, { useEffect, useState } from \u0026#39;react\u0026#39; import { useHistory } from \u0026#39;react-router-dom\u0026#39; import axios from \u0026#39;axios\u0026#39; import { BASE_URL } from \u0026#39;../utils/consts\u0026#39; import Loading from \u0026#39;../containers/Spinner/Loading\u0026#39; const GenreListScreen = (props) =\u0026gt; { const { match: { params: { genreId } } } = props const [podcasts, setPodcasts] = useState({}) useEffect(() =\u0026gt; { const fetchAPI = async () =\u0026gt; { getPodcasts(genreId) .then(data =\u0026gt; { setPodcasts(data) }) .catch(err =\u0026gt; console.log(err)) }; fetchAPI(); }, [genreId]); const { results } = podcasts const history = useHistory() const handleClick = (collectionId) =\u0026gt; { history.push(`../podcast/${collectionId}`) } return ( \u0026lt;\u0026gt; { results ? \u0026lt;\u0026gt; \u0026lt;section className=\u0026#34;container px-5 mx-auto\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-2xl py-2 sm:pt-10 font-bold pb-5 \u0026#34;\u0026gt;{results[0].genres[0]}\u0026lt;/h1\u0026gt; \u0026lt;div className=\u0026#34;flex flex-wrap\u0026#34;\u0026gt; { results.map(podcast =\u0026gt; ( \u0026lt;div className=\u0026#34;xl:w-1/5 md:w-1/2\u0026#34; key={podcast.collectionName} \u0026gt; \u0026lt;div className=\u0026#34;p-1\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;p-3 bg-gray-900 hover:bg-gray-800 cursor-pointer rounded-lg\u0026#34; onClick={() =\u0026gt; handleClick(podcast.collectionId)}\u0026gt; \u0026lt;img className=\u0026#34;rounded-lg w-full object-contain mb-1\u0026#34; src={podcast.artworkUrl600} alt=\u0026#34;content\u0026#34; /\u0026gt; \u0026lt;div className=\u0026#34;min-h-full h-14\u0026#34;\u0026gt; \u0026lt;h2 className=\u0026#34;text-left mt-2 home-screen-truncate-collection-name text-sm text-white font-medium title-font\u0026#34;\u0026gt; {podcast.collectionName} \u0026lt;/h2\u0026gt; \u0026lt;p className=\u0026#34;text-left text-gray-400 text-xs\u0026#34;\u0026gt; {podcast.artistName} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; )) } \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/\u0026gt; : \u0026lt;Loading /\u0026gt; } \u0026lt;/\u0026gt; ) } export default GenreListScreen const getPodcasts = async (genreId) =\u0026gt; { const response = await axios.get(`${BASE_URL}search?term=podcast\u0026amp;genreId=${genreId}\u0026amp;limit=200`) return response.data } This file gets the genreId from the URL as a prop. Then queries the Apple API to get the top 200 podcasts in that genre. And the user can click on any of these podcasts to see their details served by the PodcastDetailsScreen component discussed in prior parts of these tutorials.\nCreate SearchResults.jsx component This component will receive the results of searching the API as props and display them.\nCreate a file called SearchResults.jsx in src/containers/SearchResult.\nCopy the code below into SearchResults.jsx.\nimport React from \u0026#39;react\u0026#39; import { getGenreColor, getGenreGradientColor } from \u0026#39;../../utils/genreColor\u0026#39; import EpisodeDescription from \u0026#39;../../components/EpisodeDescription\u0026#39; const SearchResults = ({ podcastResults, episodeResults, activeSearchText, handleClick }) =\u0026gt; { const topResult = podcastResults[0] const episodes = episodeResults const otherPodcasts = podcastResults.slice(1, topResult.length) return ( \u0026lt;\u0026gt; \u0026lt;div className=\u0026#34;flex md:flex-row flex-col md:space-x-4\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;md:w-2/5 w-full p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-2xl font-bold pb-2\u0026#34;\u0026gt;Top result\u0026lt;/h1\u0026gt; \u0026lt;div className={` bg-gradient-to-b ${getGenreGradientColor(topResult.genres[0])}bg-gray-900 p-5 rounded-lg hover:bg-gray-800 cursor-pointer`} onClick={() =\u0026gt; handleClick(topResult.collectionId)}\u0026gt; \u0026lt;img className=\u0026#34;object-cover w-32 h-32 rounded-lg\u0026#34; alt=\u0026#34;User avatar\u0026#34; src={topResult.artworkUrl600} /\u0026gt; \u0026lt;div className=\u0026#34;pt-5 text-gray-300 text-left\u0026#34;\u0026gt; \u0026lt;h3 className=\u0026#34;text-xl text-gray-200\u0026#34;\u0026gt;{topResult.trackName}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{topResult.artistName}\u0026lt;/p\u0026gt; \u0026lt;div className=\u0026#34;text-left pt-4\u0026#34;\u0026gt; {topResult.genres.map(genre =\u0026gt; ( \u0026lt;span className={`text-xs text-white p-0.5 mr-1 rounded ${getGenreColor(genre)}`} key={genre} \u0026gt; {genre} \u0026lt;/span\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {/* */} \u0026lt;div className=\u0026#34;md:w-3/5 w-full p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-2xl font-bold pb-2\u0026#34;\u0026gt;Episodes\u0026lt;/h1\u0026gt; { episodes \u0026amp;\u0026amp; episodes.map(item =\u0026gt; ( \u0026lt;div key={item.trackId} className=\u0026#34;flex flex-row bg-gray-900 mb-2 hover:bg-gray-800\u0026#34;\u0026gt; \u0026lt;img className=\u0026#34;object-cover rounded\u0026#34; alt=\u0026#34;User avatar\u0026#34; src={item.artworkUrl60} /\u0026gt; \u0026lt;div className=\u0026#34;text-gray-100 p-2 px-4 text-left\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;\u0026#34;\u0026gt;{item.trackName}\u0026lt;/p\u0026gt; \u0026lt;EpisodeDescription description={item.shortDescription} characterCount={150} readMore={true} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; )) } \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-2xl font-bold pb-5\u0026#34;\u0026gt;Podcast that match \u0026#39;{activeSearchText}\u0026#39;\u0026lt;/h1\u0026gt; \u0026lt;div className=\u0026#34;flex flex-wrap flex-row\u0026#34;\u0026gt; {otherPodcasts.map(podcast =\u0026gt; ( \u0026lt;div className=\u0026#34;xl:w-1/5 md:w-1/3 sm:w-1/3 w-1/3 p-1\u0026#34; key={podcast.collectionId} \u0026gt; \u0026lt;div onClick={() =\u0026gt; handleClick(podcast.collectionId)}\u0026gt; \u0026lt;div className=\u0026#34;p-3 bg-gray-900 hover:bg-gray-800 cursor-pointer rounded-lg\u0026#34;\u0026gt; \u0026lt;img className=\u0026#34;rounded-lg w-full object-contain mb-1\u0026#34; src={podcast.artworkUrl600} alt=\u0026#34;content\u0026#34; /\u0026gt; \u0026lt;div className=\u0026#34;min-h-full h-14\u0026#34;\u0026gt; \u0026lt;h2 className=\u0026#34;text-left mt-2 home-screen-truncate-collection-name text-sm text-white font-medium title-font\u0026#34;\u0026gt; {podcast.collectionName} \u0026lt;/h2\u0026gt; \u0026lt;p className=\u0026#34;text-left pt-1 text-gray-400 text-xs\u0026#34;\u0026gt; {podcast.artistName} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ) } export default SearchResults Create SearchResultSkeleton.jsx component This component doesn\u0026rsquo;t show any data, all it does it display a placeholder while the API gathers the search result. It works like a skeleton. See more about them here ant design skeleton.\nCreate a file called SearchResultSkeleton.jsx in src/containers/SearchResult.\nCopy the code below into SearchResultSkeleton.jsx.\nimport React from \u0026#39;react\u0026#39; const SearchResultSkeleton = () =\u0026gt; { return ( \u0026lt;div className=\u0026#34;flex flex-row space-x-4\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;w-2/5 p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-2xl font-bold pb-5\u0026#34;\u0026gt;Top result\u0026lt;/h1\u0026gt; \u0026lt;div className=\u0026#34;bg-gray-900 p-5\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;h-32 w-32 rounded-full bg-gray-800\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;pt-5\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;h-7 pb-3 w-2/3 bg-gray-800\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-5 w-2/5 bg-gray-800\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;w-3/5 p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-2xl font-bold pb-5\u0026#34;\u0026gt;Podcast\u0026lt;/h1\u0026gt; \u0026lt;div className=\u0026#34;h-10 w-full bg-gray-800\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-10 w-full bg-gray-800\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-10 w-full bg-gray-800\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;h-10 w-full bg-gray-800\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } export default SearchResultSkeleton Create SearchResultContainer.jsx component This component handles which component to show between the SearchResults and SearchResultSkeleton component depending on whether the API has returned results for the usrs search term.\nCreate a file called SearchResultContainer.jsx in src/containers/SearchResult.\nCopy the code below into SearchResultContainer.jsx.\nimport React from \u0026#39;react\u0026#39; import SearchResults from \u0026#39;./SearchResults\u0026#39; import SearchResultSkeleton from \u0026#39;./SearchResultSkeleton\u0026#39; const SearchResultContainer = ({ podcastResultCount, podcastResults, episodeResults, activeSearchText, handleClick }) =\u0026gt; { return ( \u0026lt;div className=\u0026#34;min-h-screen w-full\u0026#34;\u0026gt; { podcastResultCount \u0026gt; 0 ? \u0026lt;SearchResults podcastResults={podcastResults} episodeResults={episodeResults} activeSearchText={activeSearchText} handleClick={handleClick} /\u0026gt; : \u0026lt;SearchResultSkeleton /\u0026gt; } \u0026lt;/div\u0026gt; ) } export default SearchResultContainer Install use-debounce Run:\nyarn add use-debounce Debounce delays sending an API call while the user is typing to reduce the number of API calls. For more on debounce please see JavaScript debounce example. It will be used in the SearchScreen component.\nUpdate \u0026ldquo;SearchScreen.jsx`` component Now it is time to update the SearchScreen component.\nCopy the code below into SearchScreen.jsx in src/screens.\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39; import { useDebounce } from \u0026#34;use-debounce\u0026#34;; import axios from \u0026#39;axios\u0026#39;; import SearchResultContainer from \u0026#39;../containers/SearchResult/SearchResultContainer\u0026#39; import SearchTopGenres from \u0026#39;../containers/SearchTopGenres/SearchTopGenres\u0026#39; import right_chevron_circle from \u0026#39;../img/chevron_circle_right_icon.svg\u0026#39; import left_chevron_circle from \u0026#39;../img/chevron_circle_left_icon.svg\u0026#39; import search_icon_black from \u0026#39;../img/search_icon_black.svg\u0026#39; import cancel_close_delete_icon from \u0026#39;../img/cancel_close_delete_icon.svg\u0026#39; import { BASE_URL } from \u0026#39;../utils/consts\u0026#39; const initalText = \u0026#34; \u0026#34;; function SearchScreen(props) { const [searchText, setSearchText] = useState(initalText) const [searchPodcastResults, setSearchPodcastResults] = useState({}) const [searchEpisodeResults, setSearchEpisodeResults] = useState({}) const [debouncedText] = useDebounce(searchText, 500) const [activeSearchText, setActiveSearchText] = useState(\u0026#39;\u0026#39;) useEffect(() =\u0026gt; { const source = axios.CancelToken.source() if (debouncedText) { getPodcasts(debouncedText) .then(data =\u0026gt; { setSearchPodcastResults(data) }) .catch(err =\u0026gt; console.log(err)) getEpisodes(debouncedText) .then(data =\u0026gt; { setSearchEpisodeResults(data) }) .catch(err =\u0026gt; console.log(err)) } else { setSearchPodcastResults({}) setSearchEpisodeResults({}) } return () =\u0026gt; { source.cancel( \u0026#34;Canceled because of component unmounted or debounce Text changed\u0026#34; ) } }, [debouncedText, searchText]) const { history } = props const handleClick = (collectionId) =\u0026gt; { history.push(`podcast/${collectionId}`) } const handleBack = () =\u0026gt; { history.goBack() } const handleSearchCancel = (e) =\u0026gt; { setActiveSearchText(\u0026#39;\u0026#39;) setSearchText(\u0026#39;\u0026#39;) e.target.value = \u0026#39;\u0026#39; } const { resultCount: podcastResultCount, results: podcastResults } = searchPodcastResults const { results: episodeResults } = searchEpisodeResults return ( \u0026lt;section\u0026gt; \u0026lt;div className=\u0026#34;container px-5 mx-auto\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;flex flex-row space-x-5 pt-3 \u0026#34;\u0026gt; \u0026lt;img src={left_chevron_circle} className=\u0026#34;w-8 my-3 rounded-full bg-gray-400 hover:bg-gray-600 cursor-pointer\u0026#34; alt=\u0026#34;left_chevron\u0026#34; onClick={() =\u0026gt; handleBack()} /\u0026gt; \u0026lt;img src={right_chevron_circle} className=\u0026#34;w-8 my-3 rounded-full bg-gray-400 cursor-not-allowed hover:bg-gray-600 cursor-pointer\u0026#34; alt=\u0026#34;right_chevron\u0026#34; /\u0026gt; \u0026lt;div className=\u0026#34;relative w-full md:w-4/12\u0026#34;\u0026gt; \u0026lt;span className=\u0026#34;absolute inset-y-0 left-0 flex items-center pl-3\u0026#34;\u0026gt; \u0026lt;img src={search_icon_black} alt=\u0026#34;search_icon_black\u0026#34; /\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; className=\u0026#34;w-full py-3 pl-10 pr-4 text-gray-900 bg-white border border-gray-300 rounded-full\u0026#34; placeholder=\u0026#34;Podcast\u0026#34; aria-label=\u0026#34;Podcast\u0026#34; value={searchText} onChange={(e) =\u0026gt; { setSearchText(e.target.value) setActiveSearchText(e.target.value) }} /\u0026gt; { activeSearchText \u0026amp;\u0026amp; \u0026lt;span className=\u0026#34;absolute inset-y-0 right-0 flex items-center pr-2 cursor-pointer\u0026#34;\u0026gt; \u0026lt;img src={cancel_close_delete_icon} alt=\u0026#34;cancel_close_delete_icon\u0026#34; onClick={(e) =\u0026gt; handleSearchCancel(e)} /\u0026gt; \u0026lt;/span\u0026gt; } \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; { activeSearchText !== \u0026#39;\u0026#39; ? \u0026lt;SearchResultContainer podcastResultCount={podcastResultCount} podcastResults={podcastResults} episodeResults={episodeResults} activeSearchText={activeSearchText} handleClick={handleClick} /\u0026gt; : \u0026lt;SearchTopGenres /\u0026gt; } \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; ) } const getPodcasts = async (text) =\u0026gt; { const response = await axios.get(`${BASE_URL}search?term=${text}\u0026amp;entity=podcast`) return response.data } const getEpisodes = async (text) =\u0026gt; { const response = await axios.get(`${BASE_URL}search?term=${text}\u0026amp;entity=podcastEpisode\u0026amp;limit=4`) return response.data } export default SearchScreen This component handles the entire Search Page and even the GenreListScreen component. It renders the GenreListScreen component when activeSearchText !== '' is false.\nMost of the code in this component have been discussed in other parts of this tutorial. But we have not talked about debounce.\nDebounce delays sending an API call while the user is typing to reduce the number of API calls. For more on debounce please see JavaScript debounce example.\nðŸ’¡ Checkpoint 5  ðŸ”— You can also find all the code for the fourth checkpoint here. Copy the parts that are missing from your project.\n  See a live version of the application so far. Click on \u0026lsquo;Open Sandbox\u0026rsquo; to see the full code. Because the SideBar is not showing in the version below. Because the \u0026lt;iframe\u0026gt; is not wide enough to simulate a wider width screen.\n  function resizeIframe(obj) { obj.style.height = 1.05 * obj.contentWindow.document.body.scrollHeight + 'px'; }   Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\n","permalink":"https://techwizerd.com/posts/how-to-build-a-podcast-player-with-react-js-tailwind-css-and-apple-podcast-api-part-5/","summary":"Add footer player and build the search functionality Add footer player The footer player will allow us to navigate through the application and keep the ability to pause or play any episode. When the application is first loaded, it will be hidden. And only appear when the user clicks play on any episode.\nOther parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1","title":"How to Build a Podcast Player With React Js Tailwind Css and Apple Podcast Api Part 5"},{"content":"Building the Podcast Details Screen In this part, we would go back to the PodcastDetailsScreen component to put the finishing touches on it. In the first part, we created the PodcastDetailsScreen and added a placeholder text to test it.\nThe PodcastDetailsScreen component displays the podcast details screen, which has more details about podcasts and their episodes with buttons for users to play/pause each episode.\nThe PodcastDetailsScreen component has a lot of children components\u0026hellip; and even grandchildren components. But the technology behind it has been discussed in earlier parts of this tutorial. So I won\u0026rsquo;t explain them in detail here.\nTo implement the podcast details screen, do the following\n Install react-infinite-scroll-component and moment Create two functions to handle colors for podcast categories Update MainSection component Create ReleaseDate component Create EpisodeDuration component Create EpisodeDescription component Create EpisodeDescription component Create PodcastDetailsEpisodes component Create PodcastDetailsBody component Create PodcastDetailsHeader component Create a LoadMore icon Update PodcastDetailsScreen component  Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\nInstall react-infinite-scroll-component and moment Run:\nyarn add react-infinite-scroll-component moment react-infinite-scroll-component is a module that handles lazy loading.\nSome podcasts have more than 500 episodes. So when a user visits the podcast details page, at first, only ten episodes will be displayed. Then, as they scroll down, more episodes will appear. That is where react-infinite-scroll-component comes in.\nmoment is a module that handles the formatting of date and time elegantly. It will be used to get the podcast release date format.\nCreate two functions to handle colors for podcast categories In the utils folder created earlier, create a file called genreColor.js\nCopy the code below into genreColors.js:\nexport const getGenreColor = (genre) =\u0026gt; { // Return specific color for each genre  switch (genre) { case \u0026#39;Entrepreneurship\u0026#39;: return \u0026#39;bg-pink-500\u0026#39; case \u0026#39;Podcasts\u0026#39;: return \u0026#39;bg-purple-500\u0026#39; case \u0026#39;Business\u0026#39;: return \u0026#39;bg-indigo-500\u0026#39; case \u0026#39;News\u0026#39;: return \u0026#39;bg-blue-500\u0026#39; case \u0026#39;History\u0026#39;: return \u0026#39;bg-green-500\u0026#39; case \u0026#39;Society \u0026amp; Culture\u0026#39;: return \u0026#39;bg-red-500\u0026#39; case \u0026#39;Religion \u0026amp; Spirituality\u0026#39;: return \u0026#39;bg-yellow-500\u0026#39; case \u0026#39;True Crime\u0026#39;: return \u0026#39;bg-red-800\u0026#39; case \u0026#39;Design\u0026#39;: return \u0026#39;bg-blue-500\u0026#39; default: return \u0026#39;bg-gray-500\u0026#39; } } export const getGenreGradientColor = (genre) =\u0026gt; { // Return specific color for each genre  switch (genre) { case \u0026#39;Entrepreneurship\u0026#39;: return \u0026#39;from-pink-900\u0026#39; case \u0026#39;Podcasts\u0026#39;: return \u0026#39;from-purple-900\u0026#39; case \u0026#39;Business\u0026#39;: return \u0026#39;from-indigo-900\u0026#39; case \u0026#39;News\u0026#39;: return \u0026#39;from-blue-900\u0026#39; case \u0026#39;History\u0026#39;: return \u0026#39;from-green-900\u0026#39; case \u0026#39;Society \u0026amp; Culture\u0026#39;: return \u0026#39;from-red-900\u0026#39; case \u0026#39;Religion \u0026amp; Spirituality\u0026#39;: return \u0026#39;from-yellow-900\u0026#39; case \u0026#39;True Crime\u0026#39;: return \u0026#39;from-red-900\u0026#39; case \u0026#39;Design\u0026#39;: return \u0026#39;from-blue-900\u0026#39; default: return \u0026#39;from-blue-500\u0026#39; } } This file has two functions:\ngetGenreColor takes the genre of a podcast and returns a color for the podcast genre pills. If the genre doesn\u0026rsquo;t match any of the cases, it returns the default.\ngetGenreGradientColor does the same, although it returns a background color in a gradient format used to make the top section of each podcast details screen look different.\nUpdate MainSection component Overwrite the code in MainSection.jsx with the code below:\nimport React from \u0026#39;react\u0026#39; import { Switch, Route } from \u0026#39;react-router-dom\u0026#39; import HomeScreen from \u0026#39;../screens/HomeScreen\u0026#39; import SearchScreen from \u0026#39;../screens/SearchScreen\u0026#39; import PodcastDetailsScreen from \u0026#39;../screens/PodcastDetailsScreen\u0026#39; import GenreListScreen from \u0026#39;../screens/GenreListScreen\u0026#39; const MainSection = ({ handlePause, handlePlay }) =\u0026gt; { return ( \u0026lt;\u0026gt; \u0026lt;main className=\u0026#34; player-section pl-0 md:pl-60 min-h-screen min-w-full\u0026#34;\u0026gt; \u0026lt;Switch\u0026gt; \u0026lt;Route exact path=\u0026#34;/\u0026#34; component={HomeScreen}\u0026gt;\u0026lt;/Route\u0026gt; \u0026lt;Route exact path=\u0026#34;/Search\u0026#34; component={SearchScreen}\u0026gt;\u0026lt;/Route\u0026gt; \u0026lt;Route exact path=\u0026#34;/podcast/:collectionId\u0026#34; render={(props) =\u0026gt; (\u0026lt;PodcastDetailsScreen {...props} handlePause={handlePause} handlePlay={handlePlay} /\u0026gt;)} /\u0026gt; \u0026lt;Route exact path=\u0026#34;/genre/:genreId\u0026#34; component={GenreListScreen}\u0026gt;\u0026lt;/Route\u0026gt; \u0026lt;/Switch\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/\u0026gt; ) } export default MainSection Updated the route for PodcastDetailsScreen so that it can pass the functions down to its children\u0026rsquo;s components.\nCreate ReleaseDate component Create a file in the components folder called ReleaseDate.jsx.\nCopy the following code into ReleaseDate.jsx\nimport React from \u0026#39;react\u0026#39; import moment from \u0026#39;moment\u0026#39; const ReleaseDate = (props) =\u0026gt; { const { date } = props const date_string = moment(date).format(\u0026#39;DD MMM YYYY\u0026#39;) return ( \u0026lt;div\u0026gt; \u0026lt;span className=\u0026#34;text-xs pl-3\u0026#34;\u0026gt;{ date_string }\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; ) } export default ReleaseDate This component uses moment to get the date of a podcast episode release in our desired format.\nCreate EpisodeDuration component Create a file in the components folder called EpisodeDuration.jsx.\nCopy the following code into EpisodeDuration.jsx:\nimport React from \u0026#39;react\u0026#39; const EpisodeDuration = ({ duration }) =\u0026gt; { let new_duration = \u0026#39;\u0026#39; if (duration) { new_duration = Math.floor((duration / 1000) / 60) + \u0026#34; min\u0026#34; } return ( \u0026lt;div\u0026gt; { new_duration ? \u0026lt;\u0026gt; \u0026lt;span className=\u0026#34;px-1\u0026#34;\u0026gt;\u0026amp;bull;\u0026lt;/span\u0026gt; \u0026lt;span className=\u0026#34;text-xs\u0026#34;\u0026gt; {new_duration} \u0026lt;/span\u0026gt; \u0026lt;/\u0026gt; : \u0026lt;\u0026gt;\u0026lt;/\u0026gt; } \u0026lt;/div\u0026gt; ) } export default EpisodeDuration This component receives the duration of a podcast episode as a destructured property of the prop then returns the duration in minutes if it is defined. Else it returns nothing.\nCreate EpisodeDescription component Create a file in the components folder called EpisodeDescription.jsx.\nCopy the following code into EpisodeDescription.jsx:\nimport React, { useState } from \u0026#39;react\u0026#39; const NewLine = (text) =\u0026gt; { return \u0026lt;div style={{ whiteSpace: \u0026#34;pre-wrap\u0026#34; }}\u0026gt;{text}\u0026lt;/div\u0026gt; } const EpisodeDescription = ({ description, characterCount, readMore }) =\u0026gt; { const [isReadMore, setIsReadMore] = useState(true) const toggleReadMore = () =\u0026gt; { setIsReadMore(!isReadMore) } return ( \u0026lt;\u0026gt; \u0026lt;div className=\u0026#34;text-xs\u0026#34;\u0026gt; { description ? \u0026lt;\u0026gt; {isReadMore ? description.slice(0, characterCount) + \u0026#39;...\u0026#39; : NewLine(description)} \u0026amp;nbsp;\u0026amp;nbsp; { readMore \u0026amp;\u0026amp; \u0026lt;span onClick={toggleReadMore} className=\u0026#34;font-black underline cursor-pointer text-white\u0026#34;\u0026gt; {isReadMore ? \u0026lt;span\u0026gt;read more\u0026lt;/span\u0026gt; : \u0026lt;span className=\u0026#34;block text-right -mt-4 \u0026#34;\u0026gt;read less\u0026lt;/span\u0026gt;} \u0026lt;/span\u0026gt; } \u0026lt;/\u0026gt; : \u0026lt;span className=\u0026#34;italic text-gray-600\u0026#34;\u0026gt;No description\u0026lt;/span\u0026gt; } \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ) } export default EpisodeDescription This component is reusable. It accepts the description, characterCount, readMore which is a boolean to determine whether some text should be hidden and show a \u0026lsquo;read more\u0026rsquo; button when truncated.\nIt cuts the description according to characterCount specified. Then, it uses the NewLine to ensure that React respects the HTML tags within the description because the Apple API description includes HTML tags.\nAnd it returns \u0026lsquo;No description\u0026rsquo; if description is undefined.\nCreate PodcastDetailsEpisodes component Create a file in the components folder called PodcastDetailsEpisodes.jsx.\nCopy the following code into PodcastDetailsEpisodes.jsx:\nimport React from \u0026#39;react\u0026#39; import { useSelector } from \u0026#39;react-redux\u0026#39; import ReleaseDate from \u0026#39;./ReleaseDate\u0026#39; import EpisodeDuration from \u0026#39;./EpisodeDuration\u0026#39; import EpisodeDescription from \u0026#39;./EpisodeDescription\u0026#39; import play_button from \u0026#39;../img/play_button.svg\u0026#39; import pause_button from \u0026#39;../img/pause_button.svg\u0026#39; const PodcastDetailsEpisodes = ({ episodes, handlePause, handlePlay }) =\u0026gt; { const currentTrack = useSelector((state) =\u0026gt; state.currentTrack) const { isPlaying, episode: { episodeUrl } } = currentTrack return ( \u0026lt;\u0026gt; { episodes \u0026amp;\u0026amp; \u0026lt;\u0026gt; {episodes.map(episode =\u0026gt; ( \u0026lt;div key={episode.releaseDate} className=\u0026#34;my-3\u0026#34; \u0026gt; \u0026lt;div className=\u0026#34;flex w-full max-w-full mx-auto overflow-hidden hover:bg-gray-900 border-b border-gray-800 shadow-md px-4 py-6\u0026#34;\u0026gt; \u0026lt;img className=\u0026#34;object-cover w-32 h-32 rounded pt-5 md:pt-1\u0026#34; alt=\u0026#34;User avatar\u0026#34; src={episode.artworkUrl160} /\u0026gt; \u0026lt;div className=\u0026#34;flex items-center\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;pl-3\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34; dark:text-gray-200\u0026#34;\u0026gt; \u0026lt;h3 className=\u0026#34;font-medium pb-2 text-white\u0026#34;\u0026gt;{episode.trackName}\u0026lt;/h3\u0026gt; \u0026lt;EpisodeDescription description={episode.description} characterCount={150} readMore={true} /\u0026gt; \u0026lt;div className=\u0026#34;pt-3 flex \u0026#34;\u0026gt; { isPlaying === true \u0026amp;\u0026amp; episodeUrl === episode.episodeUrl ? \u0026lt;img src={pause_button} alt=\u0026#34;button\u0026#34; onClick={handlePause} /\u0026gt; : \u0026lt;img src={play_button} alt=\u0026#34;button\u0026#34; onClick={(e) =\u0026gt; handlePlay(episode)(e)} /\u0026gt; } \u0026lt;ReleaseDate date={episode.releaseDate} /\u0026gt; \u0026lt;EpisodeDuration duration={episode.trackTimeMillis} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; )) } \u0026lt;/\u0026gt; } \u0026lt;/\u0026gt; ) } export default PodcastDetailsEpisodes This component brings together some of the smaller components that have been defined above. Like the ReleaseDate, EpisodeDurationandEpisodeDescription``. It is the component that holds data of each episode on the podcast details page.\nIt receives 3 properties episodes, handlePause and handlePlay. It also subscribes to the Redux store because it implements the play/pause functionality. So it accesses isPlaying from the store. It has two images for buttons that users can click to play or pause audio. The images/buttons change according to the value of isPlaying whether it\u0026rsquo;s true/false.\nCreate PodcastDetailsBody component Create a file in the components folder called PodcastDetailsBody.jsx.\nCopy the following code into PodcastDetailsBody.jsx:\nimport React, { useState } from \u0026#39;react\u0026#39; import InfiniteScroll from \u0026#39;react-infinite-scroll-component\u0026#39; import PodcastDetailsEpisodes from \u0026#39;./PodcastDetailsEpisodes\u0026#39; import LoadMore from \u0026#39;../containers/Spinner/LoadMore\u0026#39; const PodcastDetailsBody = ({ episodes, handlePause, handlePlay }) =\u0026gt; { const [count, setCount] = useState({ prev: 1, next: 10 }) const [hasMore, setHasMore] = useState(true); const [current, setCurrent] = useState(episodes.slice(count.prev, count.next)) const getMoreData = () =\u0026gt; { if (current.length + 10 \u0026gt;= episodes.length) { setHasMore(false); return; } setTimeout(() =\u0026gt; { setCurrent(current.concat(episodes.slice(count.prev + 10, count.next + 10))) }, 1000) setCount((prevState) =\u0026gt; ({ prev: prevState.prev + 10, next: prevState.next + 10 })) } return ( \u0026lt;div className=\u0026#34;flex max-w-full md:px-8 px-0 text-left text-gray-300\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;md:w-7/12 w-full\u0026#34;\u0026gt; \u0026lt;InfiniteScroll dataLength={current.length} next={getMoreData} hasMore={hasMore} loader={\u0026lt;LoadMore /\u0026gt;} \u0026gt; \u0026lt;PodcastDetailsEpisodes episodes={current} handlePause={handlePause} handlePlay={handlePlay} /\u0026gt; \u0026lt;/InfiniteScroll\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;w-5/12 h-32 pl-12 md:block hidden\u0026#34;\u0026gt; \u0026lt;h2 className=\u0026#34;font-semibold text-2xl\u0026#34;\u0026gt;About\u0026lt;/h2\u0026gt; \u0026lt;p className=\u0026#34;text-1xl font-thin pt-4\u0026#34;\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequuntur corrupti cupiditate quibusdam magnam ipsum. Eveniet numquam sit, dignissimos rerum nihil quod mollitia, natus tempora ullam, esse dolores error repellat nisi. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } export default PodcastDetailsBody Explain more of the top Component Explain more of the top Component Explain more of the top Component Create PodcastDetailsHeader component Create a file in the components folder called PodcastDetailsHeader.jsx.\nCopy the following code into PodcastDetailsHeader.jsx:\nimport React from \u0026#39;react\u0026#39; import { getGenreColor, getGenreGradientColor } from \u0026#39;../utils/genreColor\u0026#39; const PodcastDetailsHeader = ({ podcastDetails }) =\u0026gt; { return ( \u0026lt;div className={` bg-gradient-to-b ${getGenreGradientColor(podcastDetails.genres[0])}`}\u0026gt; \u0026lt;div className=\u0026#34;md:px-8 md:pt-28 md:py-6 p-3 pb-6 flex flex-row flex-grow\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;md:w-1/5 w-2/6\u0026#34;\u0026gt; \u0026lt;img src={podcastDetails.artworkUrl600} className=\u0026#34;rounded-lg\u0026#34; alt={podcastDetails.artworkUrl600} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;text-left md:pl-4 pl-2 shadow font-semibold hover:shadow-md\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-left text-gray-100 text-3xl md:text-5xl md:pt-5 font-black \u0026#34;\u0026gt; {podcastDetails.collectionName} \u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;text-left text-gray-100 py-1 pb-1 text-sm font-thin\u0026#34;\u0026gt; {podcastDetails.artistName} \u0026lt;/p\u0026gt; \u0026lt;div className=\u0026#34;text-left p-1\u0026#34;\u0026gt; {podcastDetails.genres.map(genre =\u0026gt; ( \u0026lt;span className={`text-xs text-white p-0.5 mr-1 rounded font-thin ${getGenreColor(genre)}`} key={genre} \u0026gt; {genre} \u0026lt;/span\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;p className=\u0026#34;text-left text-xs text-gray-300 py-1\u0026#34;\u0026gt;{podcastDetails.trackCount} Episodes\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;px-8 flex flex-row\u0026#34;\u0026gt; {/* \u0026lt;ListenButton /\u0026gt; the non functional red button */} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } export default PodcastDetailsHeader This component is the header of the podcast details screen. It displays relevant details about the podcast. Like the name, description, and genres. It also implements the background color gradient according to the main podcast genre.\nCreate a LoadMore icon We need a loading icon to support our infinite scrolling. It would be an indicator to let the user know that more podcast is loading. And when there is no more podcast to load. This load more icon will disappear.\nVisit this site to get loading elements. You can choose anyone.\nIn the Spinner within the containers folder. Then create two files in the Spinner folder called LoadMore.css and LoadingMore.jsx.\nYou can copy mine.\n ðŸ”— You can visit GitHub and copy LoadMore.css and LoadMore.jsx.\n Update PodcastDetailsScreen component Now we can update the PodcastDetailsScreen component, that is in the screens folder.\nCopy the code below and overwrite the PodcastDetailsScreen file:\nimport React, { useState, useEffect } from \u0026#39;react\u0026#39; import axios from \u0026#39;axios\u0026#39; import PodcastDetailsBody from \u0026#39;../components/PodcastDetailsBody\u0026#39; import PodcastDetailsHeader from \u0026#39;../components/PodcastDetailsHeader\u0026#39; import Loading from \u0026#39;../containers/Spinner/Loading\u0026#39; import { BASE_URL } from \u0026#39;../utils/consts\u0026#39; function PodcastDetailsScreen({ match: { params: { collectionId } }, handlePause, handlePlay }) { const [podcast, setPodcast] = useState({}) useEffect(() =\u0026gt; { const fetchAPI = async () =\u0026gt; { getPodcast(collectionId) .then(data =\u0026gt; { setPodcast(data) }) .catch(err =\u0026gt; console.log(err)) }; fetchAPI(); }, [collectionId]); const { results } = podcast let podcastList, podcastDetails if (results) { podcastDetails = results[0] podcastList = results.slice(1, results.length) } return ( \u0026lt;section\u0026gt; { results ? \u0026lt;\u0026gt; \u0026lt;PodcastDetailsHeader podcastDetails={podcastDetails} /\u0026gt; \u0026lt;PodcastDetailsBody episodes={podcastList} handlePause={handlePause} handlePlay={handlePlay} /\u0026gt; \u0026lt;/\u0026gt; : \u0026lt;\u0026gt; \u0026lt;Loading /\u0026gt; \u0026lt;/\u0026gt; } \u0026lt;/section\u0026gt; ) } const getPodcast = async (collectionId) =\u0026gt; { const response = await axios.get(`${BASE_URL}lookup?id=${collectionId}\u0026amp;country=US\u0026amp;media=podcast\u0026amp;entity=podcastEpisode\u0026amp;limit=400`) return response.data } export default PodcastDetailsScreen Most of the technology in this file has been covered in other parts of this tutorial. Like the loading, API call, BASE_URL, and using React Hooks (useState and useEffects).\nI will only discuss technology that you are seeing for the first time.\nLike what is passed to the PodcastDetailsScreen component.\nfunction PodcastDetailsScreen({ match: { params: { collectionId } }, handlePause, handlePlay }) First the props is destructured to obtain the items inside - handlePause, handlePlay and collectionId.\nhandlePause and handlePlay are functions to be passed down to PodcastDetailsBody component.\ncollectionId is destructured from params which is destructured from match. collectionId is a portion of the URL that represents the id of a podcast. This route was defined in the URL in the MainSection.jsx file.\n\u0026lt;Route exact path=\u0026#34;/podcast/:collectionId\u0026#34; render={(props) =\u0026gt; ( \u0026lt;PodcastDetailsScreen {...props} handlePause={handlePause} handlePlay={handlePlay} /\u0026gt; )} /\u0026gt; The collectionId will be used to query the API to get details about the podcast in the getPodcast function that is at the bottom of PodcastDetailsScreen.jsx.\nðŸ’¡ Checkpoint 4  ðŸ”— You can also find all the code for the fourth checkpoint here. Copy the parts that are missing from your project.\n  See a live version of the application so far. Click on \u0026lsquo;Open Sandbox\u0026rsquo; to see the full code. Because the SideBar is not showing in the version below. Because the \u0026lt;iframe\u0026gt; is not wide enough to simulate a wider width screen.\n  function resizeIframe(obj) { obj.style.height = 1.05 * obj.contentWindow.document.body.scrollHeight + 'px'; }   Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\n","permalink":"https://techwizerd.com/posts/how-to-build-a-podcast-player-with-react-js-tailwind-css-and-apple-podcast-api-part-4/","summary":"Building the Podcast Details Screen In this part, we would go back to the PodcastDetailsScreen component to put the finishing touches on it. In the first part, we created the PodcastDetailsScreen and added a placeholder text to test it.\nThe PodcastDetailsScreen component displays the podcast details screen, which has more details about podcasts and their episodes with buttons for users to play/pause each episode.\nThe PodcastDetailsScreen component has a lot of children components\u0026hellip; and even grandchildren components.","title":"How to Build a Podcast Player With React Js Tailwind Css and Apple Podcast Api Part 4"},{"content":"Setting up the React-Redux store to handle playing audio In this section, we would implement the react-redux state management that handles our currently playing podcast. And allows users to visit other pages without stopping the music.\nThis means that the playing audio will be attached to a component that is rendered throughout the entire application. The App component is the best component that fits this bill in our application. Because all other components are its children in one way other.\nA little about React-Redux Redux is a predictable state container for JavaScript apps.\nReact Redux is the official React UI bindings layer for Redux. It lets your React components read data from a Redux store and dispatch actions to the store to update the state.\nReact-Redux helps manage the state across the application. Whenever the application state is updated, it will reflect everywhere the state is subscribed. It is perfect for our functional components. And even for state components, you do not have to pass the state down through props. It can get messy. With React-Redux, you can maintain a single source of truth where all components can subscribe to. Since it is a state management tool, it can persist between page navigations, which is perfect for our audio player.\nIf you want to learn more about React Redux, please visit the official site.\nTo set up a working React Redux store, you have to do the following:\n Install react-redux, redux-thunk Create a play audio reducer (React Redux) Create a play audio action (React Redux) Create a store Subscribe the entire application to the store Create functions in App.js to handle audio  Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\nInstall react-redux, redux-thunk Run:\nyarn add react-redux redux-thunk Create a play audio reducer (React Redux) Create a folder called redux within the src folder. This folder will house all the react-redux related files.\nCreate a folder within the redux folder called reducers. Then create a new file called playEpisodeReducer.js within the reducers folder.\nReducers are functions that take the current state and an action as arguments and return a new state result. In other words, (state, action) =\u0026gt; newState.\nCopy the code below into the playEpisodeReducer.js file.\nexport const EPISODE_PLAY_REQUEST = \u0026#39;EPISODE_PLAY_REQUEST\u0026#39; export const EPISODE_PLAYING = \u0026#39;EPISODE_PLAYING\u0026#39; export const EPISODE_PAUSE = \u0026#39;EPISODE_PAUSE\u0026#39; const initialState = { loading: false, isPlaying: undefined, episode: {}, error: false } export const playEpisodeReducer = (state = initialState, action) =\u0026gt; { switch (action.type) { case EPISODE_PLAY_REQUEST: return { ...state, episode: action.payload, loading: true, } case EPISODE_PLAYING: return { ...state, isPlaying: true, loading: false } case EPISODE_PAUSE: return { ...state, isPlaying: false } default: return state } } This reducer has 3 actions.\nWhen the EPISODE_PLAY_REQUEST is triggered. It returns the state and episode object, which holds details of the episode the user just clicked on. It then sets loading to true, although no loading signal was implemented in the application. You can implement that later. It will not impact the application\u0026rsquo;s functionality; the audio is either playing or not in the application. But most audio apps have a loading functionality; as the audio loads, you get a spinning indicator telling you that the music is downloading and will start soon.\nThe episode object can now be accessed anywhere in the application because it has been added to the store. The store will be created soon.\nThe EPISODE_PLAYING is triggered right after EPISODE_PLAY_REQUEST, and it also returns the state. It changes loading to false. And also returns isPlaying as true. isPlaying will be used to display the pause button. When isPlaying is true, the pause button will be displayed, and when isPlaying is false, the play button will display. The play/pause buttons will be implemented in the components.\nIf no action is passed the code defaults to the default and just returns the state.\nCreate a play audio action (React Redux) Create a folder within the redux folder called actions. Then create a new file called playEpisodeActions.js within the actions folder.\nCopy the code below into the playEpisodeActions.js file.\nimport { EPISODE_PLAY_REQUEST, EPISODE_PLAYING, EPISODE_PAUSE } from \u0026#39;../reducers/playEpisodeReducer\u0026#39; export const play = (episode) =\u0026gt; async (dispatch) =\u0026gt; { const episodeDetails = getEpisodeDetails(episode) dispatch ({ type: EPISODE_PLAY_REQUEST, payload: episodeDetails }) try { dispatch({ type: EPISODE_PLAYING }) } catch (error) { console.log(error) } } export const pause = () =\u0026gt; (dispatch) =\u0026gt; { dispatch({ type: EPISODE_PAUSE }) } export const getEpisodeDetails = (episode) =\u0026gt; { // episode object has so many properties, take only relevant ones  const { episodeUrl, artworkUrl60, trackId, trackTimeMillis, trackName, shortDescription, collectionName } = episode const episodeDetails = { episodeUrl, artworkUrl60, trackId, trackTimeMillis, trackName, shortDescription, collectionName } return episodeDetails } This file has 3 functions, 2 (play and pause) are redux actions. The other one, getEpisodeDetails, is a helper function.\nThe getEpisodeDetails takes an episode as a parameter, destructures it to get only the properties that will be displayed in the application. Then creates and returns an object called episodeDetails. This function is necessary because each episode record from Apple\u0026rsquo;s API has a lot of properties. And only a few are needed by the application.\nThe play function will be called when the play button is clicked. In the play function, getEpisodeDetails is called to trim down episode and save the result in episodeDetails constant.\nNext, you dispatch the EPISODE_PLAY_REQUEST action and pass episodeDetails to the reducer. This dispatch will match the EPISODE_PLAY_REQUEST condition in the playEpisodeReducer.js\u0026rsquo;s switch case, which will save the episodeDetails to the store.\nThen a try/catch is used to dispatch EPISODE_PLAYING to the store. This will match EPISODE_PLAYING condition in the playEpisodeReducer.js switch case, which changes the isPlaying to true, to indicate that audio is playing.\nThe pause function dispatches the EPISODE_PAUSE action to the store, which changes the isPlaying to false.\nThe play and pause functions are handled by React components, while redux maintains the currently playing episode. So that you can have it in our footer section, which doesn\u0026rsquo;t change as we navigate between different pages, and you can also navigate through different pages while the audio is playing.\nCreate a store The next step is to bring this all together. By creating a store. The store is responsible for coordinating the flow between the action and reducer.\nIn the redux folder, create a file called store.js.\nCopy the code below into the store.js file.\nimport { createStore, combineReducers, compose, applyMiddleware } from \u0026#39;redux\u0026#39; import thunk from \u0026#39;redux-thunk\u0026#39;; import { playEpisodeReducer } from \u0026#39;./reducers/playEpisodeReducer\u0026#39; const initialState = { currentTrack: { episode : {episodeUrl: undefined}} } const reducer = combineReducers({ currentTrack: playEpisodeReducer }) const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; const store = createStore( reducer, initialState, composeEnhancer(applyMiddleware(thunk)) ) export default store The process of creating a redux store is the same across most applications. For a comprehensive guide to React-Redux, see this tutorial and the official guide.\nIn this file, multiple modules are imported through redux and redux-thunk.\nThe reducer - playEpisodeReducer  is also imported to register it.\nNext, an initialState object is created. This object has nested objects episode within currentTrack. And the episode object has an episodeUrl property set to undefined. This property will be used to hide or display the FooterPlayer component. If episodeUrl is undefined, the FooterPlayer will not show. Because it means the user has not tried to play any episode since visiting the application.\nThis initialState object is a representation of the redux store when the application is first loaded. When the user clicks on play then episodeDetails will be updated with details of the episode that was clicked.\nThe net part is boiler plate code.\nNext register the reducer through combineReducers.\nThen add the Redux chrome dev tools.\nThen finally create the store with the reducer and initial state.\nSubscribe the entire application to the store Go back to the index.js file in the root of the src folder.\nOverwrite all the code in index.css with the code below\nimport React from \u0026#39;react\u0026#39;; import ReactDOM from \u0026#39;react-dom\u0026#39;; import \u0026#39;./index.css\u0026#39;; import App from \u0026#39;./App\u0026#39;; import { Provider } from \u0026#39;react-redux\u0026#39; import store from \u0026#39;./redux/store\u0026#39; ReactDOM.render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Provider store={store}\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Provider\u0026gt; \u0026lt;/React.StrictMode\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ); Here you are registering the redux store in our application. All you have done so far is create the store its reducer and actions.\nCreate functions in App.js to handle audio Now go back to the App.js file.\nAnd overwrite the code in there with the one below.\nimport React, { useState } from \u0026#39;react\u0026#39; import { BrowserRouter } from \u0026#39;react-router-dom\u0026#39; import SideBar from \u0026#39;./containers/SideBar\u0026#39; import MainSection from \u0026#39;./containers/MainSection\u0026#39; import MobileHeader from \u0026#39;./components/MobileHeader\u0026#39; import FooterPlayer from \u0026#39;./components/FooterPlayer\u0026#39; import { useDispatch, useSelector } from \u0026#39;react-redux\u0026#39; import { play, pause } from \u0026#39;./redux/actions/playEpisodeActions\u0026#39; import \u0026#39;./App.css\u0026#39;; function App() { const [audio, setAudio] = useState({}) const dispatch = useDispatch() const currentTrack = useSelector((state) =\u0026gt; state.currentTrack) const { isPlaying, episode: { episodeUrl, collectionName } } = currentTrack document.title = collectionName \u0026amp;\u0026amp; isPlaying ? collectionName : \u0026#39;Podcast Player\u0026#39; const handlePlay = (episode) =\u0026gt; (e) =\u0026gt; { let sound if (!episodeUrl) { sound = new Audio(episode.episodeUrl) sound.play() setAudio(sound) dispatch(play(episode)) } else if (episodeUrl !== episode.episodeUrl) { audio.pause() sound = new Audio(episode.episodeUrl) sound.play() setAudio(sound) dispatch(play(episode)) } else { audio.play() dispatch(play(episode)) } } const handlePause = () =\u0026gt; { audio.pause() dispatch(pause()) } return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;BrowserRouter\u0026gt; \u0026lt;div\u0026gt; \u0026lt;MobileHeader /\u0026gt; \u0026lt;div className=\u0026#34;flex relative\u0026#34;\u0026gt; \u0026lt;SideBar /\u0026gt; \u0026lt;MainSection handlePause={handlePause} handlePlay={handlePlay} /\u0026gt; \u0026lt;FooterPlayer handlePause={handlePause} handlePlay={handlePlay} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/BrowserRouter\u0026gt; \u0026lt;/div\u0026gt; ); } export default App The updated App.js will handle the play/pause functionality with its handlePlay and handlePause functions.\nIn this file, imported the React-Redux modules that required useDispatch and useSelector. And we imported the play and pause action. When users click on the pause/play button, these actions will be dispatched. They will trigger a change of state of our application by either adding an episode to the redux store, changing the isPlaying to true or false as discussed in the previous sections.\n// Don't copy part of App.js above const [audio, setAudio] = useState({}) const dispatch = useDispatch() const currentTrack = useSelector((state) =\u0026gt; state.currentTrack) const { isPlaying, episode: { episodeUrl, collectionName } } = currentTrack In the snippet above, an audio placeholder is created and initialized to an empty object using the useState React Hook. As explained in part 2 of this tutorial.\nThen useDispatch is assigned.\nAnd then currentTrack is gotten from the redux state management or store to get the currenctTrack object that we passed into the store.\nThen currentTrack is desctructured to get the isPlaying, episodeUrl and collectionName. Since this is related to state management whenever any of the properties of currentTrack is updated isPlaying, episodeUrl, and collectionName will be updated immeditely. Since we are implementing this in the App.js, we can pass this variable down to any proponent at prop to be consumed by any component in our application.\nThe handlePlay() function will handle playing new episodes and episodes already in the states currentTrack. It uses JavaScript currying, to pass the particular element to the function. Since the episodes are in a list in the PodcastDetailsScreen component. If you don\u0026rsquo;t use currying it can lead to unexpected behavior when the button is clicked.\nThe handlePlay() has an if statement with 2 conditions and 1 fall back. If the is episodeUrl is undefined denoted by !episodeUrl. It means the user just launched the application and has not played any video. So the FooterPlayer component at the bottom of the page will not be displayed.\nsound = new Audio(episode.episodeUrl) sound.play() setAudio(sound) dispatch(play(episode)) Then assign the episodes' URL to the Audio API, which downloads the audio file. And call the play() function of the Audio API. Next, call setAudio(sound), a React Hook, to assess the playing audios' object to our application state variable audio.\nThen dispatch the play(episode) action to React-Redux so that it will save the episode in the state. And make it available to the FooterPlayer component. The play(episode) dispatch will also change isPlaying to true which will make the pause image appear.\nThe next condition in the if statement - episodeUrl !== episode.episodeUrl. This passed the episodeUrl is undefined check. It will only be true when the user tries to play a different episode.\naudio.pause() sound = new Audio(episode.episodeUrl) sound.play() setAudio(sound) dispatch(play(episode)) It pauses any audio currently playing. Before assigning the new episodeUrl to the Audio API. Besides pausing the audio its functionality is similar to the first condition.\nThen:\nelse { audio.play() dispatch(play(episode)) } The fallback of the if statement. The program only gets to this point if the user is trying to continue playing an episode that was paused.\nThe handlePause() just pauses the audio and dispatches pause() action to change isPlaying to false in the redux store.\nIn the return statement of the App component. You pass the function down as props to MainSection and FooterPlayer component.\n\u0026lt;MainSection handlePause={handlePause} handlePlay={handlePlay} /\u0026gt; \u0026lt;FooterPlayer handlePause={handlePause} handlePlay={handlePlay} /\u0026gt; ðŸ’¡ Checkpoint 3 If you have come this far. You should have an empty currentTrack in your Redux Chrome Extension.\n ðŸ”— If you don\u0026rsquo;t have the extension. Download it for Chrome here.\n  ðŸ”— You can find the code for this part here GitHub\n  There will be no live code for this part. But please crosscheck your code with the GitHub source code for this part.\n Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\n","permalink":"https://techwizerd.com/posts/how-to-build-a-podcast-player-with-react-js-tailwind-css-and-apple-podcast-api-part-3/","summary":"Setting up the React-Redux store to handle playing audio In this section, we would implement the react-redux state management that handles our currently playing podcast. And allows users to visit other pages without stopping the music.\nThis means that the playing audio will be attached to a component that is rendered throughout the entire application. The App component is the best component that fits this bill in our application. Because all other components are its children in one way other.","title":"How to Build a Podcast Player With React Js Tailwind Css and Apple Podcast Api Part 3"},{"content":"Building the homepage Now we would focus on the homepage.\nBefore tackling the homepage, you need to provide the dependencies and files that the homepage needs because the homepage will be the first time, we are interacting with Apples' API.\nThe following will be done:\n Install axios Create a loading spinner Spin up your own reverse proxy server Create URL constants in a single file, to easily manage our URLs  Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\nInstall axios From the root of your project. Run:\nyarn add axios Create loading spinner Visit this site to get loading elements. You can choose anyone.\nCreate a file called Spinner within the containers folder. Then create two files in the Spinner folder named Loading.css and Loading.jsx.\nClick on any loader you like from the site. A modal shows you the HTML and CSS for that loader.\nYou can copy mine.\n ðŸ”— You can visit GitHub and copy my loading files for the CSS and JavaScript.\n Spin up your own reverse proxy spinner  ðŸ’¡ You can skip this step if it is confusing and use mine then come back to it when you are done with the tutorial\n A reverse proxy is a server that sits in front of web servers and forwards client (e.g., a web browser) requests to those web servers. They are typically implemented to help increase security, performance, and reliability.\nCORS Anywhere provided by Rob W will be used.\nCORS Anywhere is a NodeJS proxy that adds CORS headers to the proxied request. I noticed many CORS issues when I deployed the website; namely, the Apple API server did not set the response header.\nCORS Anywhere will prevent this. To ensure that the application doesn\u0026rsquo;t crash when it is deployed.\n ðŸ’¡ You can use mine by just using my code. But if so many users are using the app. It might hit the limitations set by Heroku.\n Heroku will be used to host our own CORS Anywhere proxy server.\nFrom your command line, go to a folder where you want to host the code.\nThen enter the following code in your command prompt or terminal and run them one after the other.\ngit clone https://github.com/Rob--W/cors-anywhere.git cd cors-anywhere/ npm install heroku create git push heroku master It might prompt you to log in to Heroku from the command prompt. Complete that so that the Heroku CLI will have access to your account.\n ðŸ’¡ I will assume that you are still using mine for the rest of this tutorial. But I will advise that you build yours if you plan to host the application and showcase it to your friends or employers. So you can be sure that it is always online.\n The reverse proxy is used by adding it before the API URL. So when the joined URL is requested. The reverse proxy server adds a header to the request before sending it off to the Apples' servers. I will provide more details in the next section.\nCreate URL constants in a single file, to easily manage our URLs In the src folder, create a new folder called utils and add a file called consts.js in the utils folder.\nThen copy the code below into the consts.js file.\nconst REVERSEPROXY_URL = 'https://secret-beyond-79263.herokuapp.com/' // Custom reverse proxy const APPLE_PODCAST_URL = 'https://itunes.apple.com/' export const BASE_URL = String(REVERSEPROXY_URL + APPLE_PODCAST_URL) const HOME_SCREEN_PODCAST_COLLECTION_IDS = '278981407,863897795,1191775648,582272991,1200361736,1322200189,1379959217,998568017,1081244497,1062418176,1334878780,316045799,480486345,265307784,643055307,1057255460,1077418457,268213039,1258635512,169078375' export const HOMESCREEN_API_URL = String(`${BASE_URL}lookup?id=${HOME_SCREEN_PODCAST_COLLECTION_IDS}`) If you created your own reverse proxy, replace the https://secret-beyond-79263.herokuapp.com/ with the URL generated by Heroku.\nThe reverse proxy is hosted at https://secret-beyond-79263.herokuapp.com/, it is saved in the REVERSEPROXY_URL constant.\nTo form the base URL for all API calls in this application, add the REVERSEPROXY_URL to the APPLE_PODCAST_URL with the reverse proxy URL coming first. The result will look like this: https://secret-beyond-79263.herokuapp.com/https://itunes.apple.com/{{-other parts of URL-}}. This means that any request is first sent to the reverse proxy, which attaches the header to the request before sending just the ..https://itunes.apple.com/..... part to Apple\u0026rsquo;s servers for processing.\nThe HOME_SCREEN_PODCAST_COLLECTION_IDS constant is just a list of podcast collectionIds that will be displayed on the homepage.\nIn the last line, a new constant is created and exported - HOMESCREEN_API_URL. The lookup?id= is part of the Apple API specification to search for something. You can find more details about the Apple Podcast search API here.\nNow that you have these requirements. You can move to the next task; the homepage, which is represented by the HomeScreen component.\nYou need a child component called HomePodcastSection to display each category of podcasts on the homepage. First, create a new file for this component.\nCreate a new file called HomePodcastSection.jsx in the components folder.\nCopy the code below into the HomePodcastSection.jsx:\nimport React from 'react' const HomePodcastSection = (props) =\u0026gt; { const { header, podcasts, history } = props const handleClick = (collectionId) =\u0026gt; { history.push(`podcast/${collectionId}`) } return ( \u0026lt;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1 className=\u0026quot;text-left text-gray-100 text-2xl py-2 sm:pt-10 font-bold \u0026quot;\u0026gt; {header} \u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026quot;flex flex-wrap flex-row\u0026quot;\u0026gt; { podcasts.map(podcast =\u0026gt; ( \u0026lt;div className=\u0026quot;xl:w-1/5 md:w-1/3 sm:w-1/3 w-1/3 px-1 py-2\u0026quot; key={podcast.collectionName} \u0026gt; \u0026lt;div onClick={() =\u0026gt; handleClick(podcast.collectionId)}\u0026gt; \u0026lt;div className=\u0026quot;p-3 bg-gray-900 hover:bg-gray-800 cursor-pointer rounded-lg\u0026quot;\u0026gt; \u0026lt;img className=\u0026quot;rounded-lg w-full object-contain mb-1\u0026quot; src={podcast.artworkUrl600} alt=\u0026quot;content\u0026quot; /\u0026gt; \u0026lt;div className=\u0026quot;min-h-full h-14\u0026quot;\u0026gt; \u0026lt;h2 className=\u0026quot;text-left mt-2 home-screen-truncate-collection-name text-sm text-white font-medium title-font\u0026quot;\u0026gt; {podcast.collectionName} \u0026lt;/h2\u0026gt; \u0026lt;p className=\u0026quot;hidden md:block text-left pt-1 text-gray-400 text-xs\u0026quot;\u0026gt; {podcast.artistName} \u0026lt;/p\u0026gt; \u0026lt;p className=\u0026quot;block md:hidden text-left pt-1 text-gray-400 text-xs\u0026quot;\u0026gt; { podcast.artistName.length \u0026gt;= 30 ? podcast.artistName.slice(0, 30) + '...' : podcast.artistName.slice(0, 30) } \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; )) } \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ) } export default HomePodcastSection In the code in this file. Some data is passed to it as props. This component is a child component of HomeScreen, therefore HomeScreen passes some data to it to loop through and display.\nIn this code - const { header, podcasts, history } = props destructures (read more about destructuring) the props to get the properties inside. The header and podcasts represent the header to be displayed and a list of podcasts to be looped through and displayed, respectively.\nThe history object was also passed from the parent component HomeScreen. It works with the router to change the URL of the app. In this case, a handleClick function that accepts a collectionId parameter, which is used to identify a podcast by Apple. And then pushes it to one of the routes defined earlier in MainSection.jsx.\nThat is:\nhistory.push(`podcast/${collectionId}`) maps to this route\n\u0026lt;Route exact path=\u0026quot;/podcast/:collectionId\u0026quot; render={(props) =\u0026gt; (\u0026lt;PodcastDetailsScreen {...props} /\u0026gt;)} /\u0026gt; defined in the MainSection.jsx file.\nTo recap the last point, the handleClick function when called passes a collectionId to the /podcast/ route which prompts the view to change from the HomeScreen the user is currently viewing to the PodcastDetailsScreen.\nIn the component return statement, which outputs to the browser, There are two significant segments. The part that displays the destructured header and the part that loops through the podcasts with map.\nAlso in HomePodcastSection.jsx the home-screen-truncate-collection-name CSS class is a custom class to truncate any collectionName or podcast name that is too long and append ... at the end. So that all podcast elements on the webpage will have equal height.\nWhile\n{ podcast.artistName.length \u0026gt;= 30 ? podcast.artistName.slice(0, 30) + '...' : podcast.artistName } checks the length of the artistName which is the description of the podcast. If it is greater than 30 characters, it trims it and appends .... If it is not up to 30 characters, print it to the screen as-is.\nWith the HomePodcastSection complete. The HomeScreen component can now be updated.\nCopy the code below. And overwrite the entire code in HomeScreen.jsx in the screens folder.\nimport React, { useEffect, useState } from \u0026#39;react\u0026#39; import axios from \u0026#39;axios\u0026#39; import { HOMESCREEN_API_URL } from \u0026#39;../utils/consts\u0026#39; import HomePodcastSection from \u0026#39;../components/HomePodcastSection\u0026#39; import Loading from \u0026#39;../containers/Spinner/Loading\u0026#39; function HomeScreen(props) { const [podcasts, setPodcasts] = useState() useEffect(() =\u0026gt; { const fetchAPI = async () =\u0026gt; { getPodcasts() .then(data =\u0026gt; { setPodcasts(data) }) .catch(err =\u0026gt; console.log(err)) }; fetchAPI(); }, []); let popularPodcasts, crimePodcasts, comedyPodcasts, politicsPodcasts if (podcasts) { // The alternative to this will be to create 4 separate API calls, which is wasteful  popularPodcasts = podcasts.slice(0, 5) crimePodcasts = podcasts.slice(5, 10) comedyPodcasts = podcasts.slice(10, 15) politicsPodcasts = podcasts.slice(15, 20) } const { history } = props return ( \u0026lt;\u0026gt; { podcasts ? \u0026lt;\u0026gt; \u0026lt;section className=\u0026#34;container px-5 mx-auto\u0026#34;\u0026gt; \u0026lt;HomePodcastSection header={\u0026#39;Popular podcasts\u0026#39;} podcasts={popularPodcasts} history={history} /\u0026gt; \u0026lt;HomePodcastSection header={\u0026#39;Top crime podcasts\u0026#39;} podcasts={crimePodcasts} history={history} /\u0026gt; \u0026lt;HomePodcastSection header={\u0026#39;Top comedy podcasts\u0026#39;} podcasts={comedyPodcasts} history={history} /\u0026gt; \u0026lt;HomePodcastSection header={\u0026#39;Top politics podcasts\u0026#39;} podcasts={politicsPodcasts} history={history} /\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/\u0026gt; : \u0026lt;\u0026gt; \u0026lt;Loading /\u0026gt; \u0026lt;/\u0026gt; } \u0026lt;/\u0026gt; ) } export default HomeScreen const getPodcasts = async () =\u0026gt; { const response = await axios.get(HOMESCREEN_API_URL) return response.data.results } You should be familiar with all the import statements, because I have talked about them previously. Except { useEffect, useState }, imported from React, at the top of the file. This are React Hooks that will help with API calls.\nuseState is a Hook that allows local state in functional components.\nuseEffect is a Hook that manages side-effects like fetch requests. It is used because it\u0026rsquo;s bad practice to put side-effect code directly in your components.\nThis code\nconst [podcasts, setPodcasts] = useState() creates a variable named podcasts and a function -setPodcasts - to set the value of podcasts. Since in our useState there\u0026rsquo;s is nothing in the parenthesis. It means podcasts is initialized as undefined. If the code was useState('') or useState({}) or useState({}), that means podcast was initialized with an empty string or empty object or empty array respectively.\nTo change the value of podcasts in the application at any time, call setPodcasts(newValue). That is how useState Hook works.\nFor example, to change the value of podcasts to the value const boy = 'Johnny' all you have to do is write setPodcasts(boy) or more clearly:\n// 'useState example' const [podcasts, setPodcasts] = useState() console.log(podcasts) //-\u0026gt; output -\u0026gt; undefined const names = ['John', 'Regina'] setPodcasts(names) console.log(podcasts) //-\u0026gt; output -\u0026gt; ['John', 'Regina'] You can see that podcast wasn\u0026rsquo;t assigned to names directly.\nMoving on to the next piece of code:\nuseEffect(() =\u0026gt; { const fetchAPI = async () =\u0026gt; { getPodcasts() .then(data =\u0026gt; { setPodcasts(data) }) .catch(err =\u0026gt; console.log(err)) }; fetchAPI(); }, []); // Note that the code below is gotten from outside the component // At the bottom of the 'HomeScreen' file const getPodcasts = async () =\u0026gt; { const response = await axios.get(HOMESCREEN_API_URL) return response.data.results } This code used the two hooks introduced earlier. The useEffect calls the getPodcasts function which calls the API using the URL constant - HOMESCREEN_API_URL - we defined in const.js and imported here. The function returns a list of podcasts.\nThen the setPodcasts(data) sets podcasts to the value - data that was returned from the getPodcasts function.\nNext\nlet popularPodcasts, crimePodcasts, comedyPodcasts, politicsPodcasts if (podcasts) { // The alternative to this will be to create 4 separate API calls, which is wasteful popularPodcasts = podcasts.slice(0, 5) crimePodcasts = podcasts.slice(5, 10) comedyPodcasts = podcasts.slice(10, 15) politicsPodcasts = podcasts.slice(15, 20) } The code above initializes the four variables.\nAnd checks if podcasts is set. Without the if statement, when you try to slice the podcasts as seen above, will lead to an error because podcasts is initialized as undefined since you don\u0026rsquo;t know whether the API call will be successful.\nNext, the different ranges of podcasts are assigned to multiple variables. You can assign the different ranges of podcasts into different variables because you know what to expect from the API. Remember in the consts file we assigned HOMESCREEN_API_URL to a list of collectionIds. The response from the API was organized in the same way we sent the request.\nI chose this method to show different podcast categories because the homepage is not just a list of podcasts, but 4 podcasts in 4 categories. One alternative would have been to make multiple calls to the API for the different categories. But that method is an inefficient use of API resources.\nconst { history } = props The code above destructures history from props.\nThen finally\n\u0026lt;\u0026gt; { podcasts ? \u0026lt;\u0026gt; \u0026lt;section className=\u0026quot;container px-5 mx-auto\u0026quot;\u0026gt; \u0026lt;HomePodcastSection header={'Popular podcasts'} podcasts={popularPodcasts} history={history} /\u0026gt; \u0026lt;HomePodcastSection header={'Top crime podcasts'} podcasts={crimePodcasts} history={history} /\u0026gt; \u0026lt;HomePodcastSection header={'Top comedy podcasts'} podcasts={comedyPodcasts} history={history} /\u0026gt; \u0026lt;HomePodcastSection header={'Top politics podcasts'} podcasts={politicsPodcasts} history={history} /\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/\u0026gt; : \u0026lt;\u0026gt; \u0026lt;Loading /\u0026gt; \u0026lt;/\u0026gt; } \u0026lt;/\u0026gt; For the code above.\npodcasts ? checks whether podcasts is set. Remember it was initially set to undefined.\nIf podcasts is set, it displays the section container, which calls each of the children component HomePodcastSection and passes them props. The header to display, the podcasts to loop through and display each podcast, and the history.\nIf podcast is not set, that is undefined. It displays the loading spinner with \u0026lt;loading /\u0026gt;.\nðŸ’¡ Checkpoint 2 If you have followed correctly. When you run yarn start. You should see a homepage with a list of podcasts. But when you click on them, they don\u0026rsquo;t show any details. But nothing breaks in the application.\n ðŸ”— If you encounter any errors, you can find the source code for this first part on GitHub. You can crosscheck with your work to find where you missed something.\n  See a live version of the application so far. Click on \u0026lsquo;Open Sandbox\u0026rsquo; to see the full code. Because the SideBar is not showing in the version below. Because the \u0026lt;iframe\u0026gt; is not wide enough to simulate a wider width screen.\n  function resizeIframe(obj) { obj.style.height = 1.05 * obj.contentWindow.document.body.scrollHeight + 'px'; }   Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1\nðŸ“˜ How to Build a Podcast Player With React Js part 2\nðŸ“˜ How to Build a Podcast Player With React Js part 3\nðŸ“˜ How to Build a Podcast Player With React Js part 4\nðŸ“˜ How to Build a Podcast Player With React Js part 5\n","permalink":"https://techwizerd.com/posts/how-to-build-a-podcast-player-with-react-js-tailwind-css-and-apple-podcast-api-part-2/","summary":"Building the homepage Now we would focus on the homepage.\nBefore tackling the homepage, you need to provide the dependencies and files that the homepage needs because the homepage will be the first time, we are interacting with Apples' API.\nThe following will be done:\n Install axios Create a loading spinner Spin up your own reverse proxy server Create URL constants in a single file, to easily manage our URLs  Other parts of the tutorial ðŸ“˜ How to Build a Podcast Player With React Js part 1","title":"How to Build a Podcast Player With React Js Tailwind Css and Apple Podcast Api Part 2"},{"content":"Introduction This tutorial will walk you through updating your page DOM after an API call, using react hooks.\nIn our example, we would be adding to a list of posts. After a new item is added to the list, we want to trigger react hooks to re-run our fetch API to update the list the user can see. The default behaviour of react useEffect() can lead to an infinite loop, although it is a working solution. But it is not a desirable one.\nRequirements This tutorial requires a basic understanding of the following concepts\n React React Hooks (useEffect(), useState()) Axios API module (fetching and posting data) create-react-app  Let\u0026rsquo;s get started const Posts = () =\u0026gt; { const [posts, setPosts] = useState([]) const baseUrl = 'https://jsonplaceholder.typicode.com/posts/' const getPosts = async () =\u0026gt; { try { const userPosts = await axios.get(baseUrl) setPosts(userPosts.data) } catch (error) { console.error(error.message) } } useEffect(() =\u0026gt; { getPosts() }, []) /* Hook to add post name through API */ const [newPost, setNewPost] = useState({ postName: '' }) const handleChange = (event) =\u0026gt; { setNewPost({ ...newPost, [event.target.name]: event.target.value }) } const handleSubmit = (e) =\u0026gt; { e.preventDefault() const url = baseUrl + 'add/' axios.post(url, { name: newPost.postName, user: 1 }) .then(response =\u0026gt; { console.log(response.data) }) .catch(error =\u0026gt; { console.log(error.response.data) }) e.target.reset() } return ( \u0026lt;div\u0026gt; \u0026lt;form onSubmit={handleSubmit}\u0026gt; \u0026lt;input name=\u0026quot;postName\u0026quot; onChange={handleChange} required /\u0026gt; \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Add Post Name\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; {posts.map(post=\u0026gt;( \u0026lt;li key={post.id}\u0026gt;{post.title}\u0026lt;/li\u0026gt; ))} \u0026lt;/div\u0026gt; ) } In the code above, we created a functional component called Posts that fetches and displays data from an API using axios. This component also has a form to add a new post name.\n The problem with this code is that when a new post name is added by axios.post to the database, the user cannot see it immediately. Unless they refresh the page.\n By adding the dependency posts to useEffect(). When a new post name is added, the list will automatically update for the user to see the new post name.\nuseEffect(() =\u0026gt; { getPosts() }, [posts]) The problem with this solution is that if we include a simple console.log('I was hit') in the getPost() method, we will see that the useEffect() runs continuously.\nAdding posts as a dependency leads to an infinite loop, because of the way object reference works in JavaScript. See react useeffect infinite loop.\nThe Solution The ideal solution is to use a dependency that is more predictable, like a simple count. This will be updated only after a successful axios POST request. That is we have successfully added a new post name.\nLet us update our code.\nconst [postLength, setPostLength] = useState(0) #\u0026lt;----new useEffect(() =\u0026gt; { getPosts() }, [postLength]) #\u0026lt;----new And add setCartLength(cartLength + 1) to the successful callback of our API call.\nconst handleSubmit = (e) =\u0026gt; { e.preventDefault() const url = baseUrl + 'add/' axios.post(url, { name: newPost.postName, user: 1 }) .then(response =\u0026gt; { console.log(response.data) setCartLength(cartLength + 1) #\u0026lt;----new }) .catch(error =\u0026gt; { console.log(error.response.data) }) e.target.reset() } What we have done here, is to add a new state called postLength.\nNow the useEffect() will be listening for changes in postLength. And its value changes, only then will getPosts be called again.\nThe API GET request for all posts will only be called again when a new post is added. We ensured that by adding the setCartLength(cartLength + 1) to the successful callback of our API POST request.\nWith this solution, we can update our list after every addition to the list. While avoiding the infinite loop of react useEffect() when using dependencies.\nThis solution can also be extended to other operations like editing or deleting any item in the list. All you have to do is change the state of your dependency after a successful API call.\n","permalink":"https://techwizerd.com/posts/how-to-use-react-use-effect-to-post-data-and-refresh-without-infinite-callback/","summary":"Introduction This tutorial will walk you through updating your page DOM after an API call, using react hooks.\nIn our example, we would be adding to a list of posts. After a new item is added to the list, we want to trigger react hooks to re-run our fetch API to update the list the user can see. The default behaviour of react useEffect() can lead to an infinite loop, although it is a working solution.","title":"How to use React useEffect to post data and refresh without infinite callback"},{"content":"Hugo blog is becoming one of the most popular static site generators.\nThe first time I used it, it blew me away by how easy it was to set up a blog on my local machine. It is also effortless to publish your Hugo site to Github Pages for free.\nIn this tutorial, I will show you how to set up your Hugo blog on Github Pages. We would be using this theme. You do not need to pay for hosting or provide your credit card details.\nStep 1: Installing Hugo on your windows machine. You can get Hugo by using Chocolatey. Chocolatey is a windows package manager.\nAfter installing Chocolatey. Visit Hugo website, for instructions on how to install Hugo.\nYou can also install it directly from GitHub. If you do not want to install Chocolatey.\nStep 2: Creating a new project After installing Hugo, type hugo in your cmd to ensure that it is working.\nhugo If that was successfully installed, you will see the following output:\nTotal in 2 ms Error: Unable to locate config file or config directory. Perhaps you need to create a new site. Run `hugo help new` for details. You can go ahead and start a new site in a directory of your choice.\nhugo new site test.com -f yml This code creates a new site called test.com and forces it to use yml format for its' config file, which is more readable than toml files. It also creates a folder called test.com that will house all our Hugo resources.\nYou should see a message like:\nCongratulations! Your new Hugo site is created in C:\\file\\path\\test.com Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026quot;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026quot; command. 2. Perhaps you want to add some content. You can add single files with \u0026quot;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026quot;. 3. Start the built-in live server via \u0026quot;hugo server\u0026quot;. Visit https://gohugo.io/ for quickstart guide and full documentation. Step 3: Add a Hugo theme As discussed earlier, Hugo has a lot of themes that makes development easy. We would use the PaperMod theme.\nRun the following code one after the other in your command prompt.\ncd test.com git init git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 This code changes the directory to test.com. It initializes git in the current folder (git is needed to push the code to GitHub and publish to GitHub Pages). And finally, it pulls the PaperMod theme from Github into the themes/PaperMod folder.\nYour directory should now look like this:\nNext, visit the PaperMod installation page and copy the content of the sample config.yml. Overwrite the original content of the config.yml file, in the root of the test.com folder.\nThen run this in your command prompt.\nhugo server This will start the Hugo server. It will show you the localhost URL to visit where Hugo says the site is running. And you should see this:\nThis is the default home page of the PaperMod theme.\nStep 4: Add pages To add pages.\nRun the command:\nhugo new posts/html.md This creates a new folder called posts and a new markdown file called html.md.\nThe file should have a title, date and draft status.\nChange the draft status to false or delete that line.\nCopy the text below into the html.md file for test purposes.\n  Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.\n  Run code below the command line:\nhugo server -D The -D flag, tells the server to also show drafts, because our html post has draft set to true. You can set draft to false, or remove that line entirely. Then you do not need the -D flag anymore.\n Note that drafts will not be added to the site when we build it later.\n You should see the first post.\nStep 5: Build Hugo site Before you deploy the site, after making changes. You have to build it. This will convert the markdown files into HTML and also creat indexes for the categories. We achieve this by running:\nhugo In the the base folder of the Hugo website.\nAt this point we are ready to move our blog to Github Pages.\nStep 6: Set up repository Firstly, in the config.yml file, add this line publishDir: \u0026quot;docs\u0026quot; after theme: PaperMod. This tells Hugo to publish our site into the directory called docs, when we build.\nThen run:\nhugo -t PaperMod The PaperMod is the name of our theme, if you are using another theme. You would type the name of your theme in its' place.\nThis code builds our site into the docs folder.\nVisit your github profile and create a new repository called test.com.\nFrom our test.com directory on our local machine. Run the following code:\ngit remote add origin \u0026lt;repository URL\u0026gt; git add . git commit -m \u0026quot;Initial Commit\u0026quot; git push origin master This code adds a remote url to our repository, adds and commits the code. Then finally pushes it to our remote repository.\nStep 6: Github Pages From the new repository, click on settings then scroll down to the Github Pages section.\nFor source, select branch as master and change /(root) to docs, then save.\nAfter saving, scroll down back to the Github Pages section, then copy the new URL that Github has provided. That is where our website is located.\nWe would copy this URL into the local config.yml file.\nIn the config.yml file replace the value for baseURL with the github page link you just copied.\nThen run the following code in the command line:\ngit add . git commit -m \u0026quot;Updated baseURL\u0026quot; git push origin master This updates the remote repository with the latest changes.\nNow when you visit the Github Pages URL, you should see the site we just built.\nThat is how we connect Hugo to Github Pages.\nThe benefit is that you can write your posts locally in markdown, when you build the site and push to the remote repository, your website will be updated automatically.\nIf you would like to host your website on your own domain like this site. This link provides instructions on how to achieve that with namecheap web host.\n","permalink":"https://techwizerd.com/posts/how-to-create-hugo-blog-on-github-pages-using-windows/","summary":"Hugo blog is becoming one of the most popular static site generators.\nThe first time I used it, it blew me away by how easy it was to set up a blog on my local machine. It is also effortless to publish your Hugo site to Github Pages for free.\nIn this tutorial, I will show you how to set up your Hugo blog on Github Pages. We would be using this theme.","title":"How to create Hugo blog on Github Pages Using Windows"}]